// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 23/10/2018 14:44:05 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files (x86)\Javscript Driver Fiscal\ifu.dll (1)
// LIBID: {AF121C69-AB27-444F-9DB9-4260A7CBB41E}
// LCID: 0
// Helpfile: 
// HelpString: 
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   IFUniversal_TLBH
#define   IFUniversal_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Ifuniversal_tlb
{

// *********************************************************************//
// HelpString: 
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_IFUniversal;
extern __declspec (package) const GUID IID_IDriver;
extern __declspec (package) const GUID CLSID_Driver;
extern __declspec (package) const GUID IID_IObtenerDatosDeInicializacionRespuesta;
extern __declspec (package) const GUID CLSID_ObtenerDatosDeInicializacionRespuesta;
extern __declspec (package) const GUID IID_ISubtotalRespuesta;
extern __declspec (package) const GUID CLSID_SubtotalRespuesta;
extern __declspec (package) const GUID IID_ICierreZTotales;
extern __declspec (package) const GUID CLSID_CierreZTotales;
extern __declspec (package) const GUID IID_IConsultarCapacidadZetasRespuesta;
extern __declspec (package) const GUID CLSID_ConsultarCapacidadZetasRespuesta;
extern __declspec (package) const GUID GUID_TipoDeComprobante;
extern __declspec (package) const GUID GUID_PuertoCOM;
extern __declspec (package) const GUID GUID_Baudio;
extern __declspec (package) const GUID GUID_ErrorNro;
extern __declspec (package) const GUID GUID_ModeloPrn;
extern __declspec (package) const GUID GUID_TipoDeDocumento;
extern __declspec (package) const GUID GUID_ResponsabilidadIVA;
extern __declspec (package) const GUID GUID_TiposTributos;
extern __declspec (package) const GUID GUID_CondicionesIVA;
extern __declspec (package) const GUID GUID_UnidadesMedida;
extern __declspec (package) const GUID GUID_TiposPago;
extern __declspec (package) const GUID GUID_TipoImpuestoInterno;
extern __declspec (package) const GUID GUID_TipoReporteElectronico;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      TipoDeComprobante;
enum      PuertoCOM;
enum      Baudio;
enum      ErrorNro;
enum      ModeloPrn;
enum      TipoDeDocumento;
enum      ResponsabilidadIVA;
enum      TiposTributos;
enum      CondicionesIVA;
enum      UnidadesMedida;
enum      TiposPago;
enum      TipoImpuestoInterno;
enum      TipoReporteElectronico;
interface DECLSPEC_UUID("{00AA0FC3-6850-4F18-BB90-9FE15E32ACBD}") IDriver;
typedef TComInterface<IDriver, &IID_IDriver> IDriverPtr;

interface DECLSPEC_UUID("{44C8E088-C222-4FC1-94ED-9395F5FE32C2}") IObtenerDatosDeInicializacionRespuesta;
typedef TComInterface<IObtenerDatosDeInicializacionRespuesta, &IID_IObtenerDatosDeInicializacionRespuesta> IObtenerDatosDeInicializacionRespuestaPtr;

interface DECLSPEC_UUID("{09BDCB7C-4945-4231-AB0C-628CF69E8561}") ISubtotalRespuesta;
typedef TComInterface<ISubtotalRespuesta, &IID_ISubtotalRespuesta> ISubtotalRespuestaPtr;

interface DECLSPEC_UUID("{A7973DAB-A411-454D-927E-517037721A21}") ICierreZTotales;
typedef TComInterface<ICierreZTotales, &IID_ICierreZTotales> ICierreZTotalesPtr;

interface DECLSPEC_UUID("{1D33F62C-0EA9-44D4-8971-2333F441D7EE}") IConsultarCapacidadZetasRespuesta;
typedef TComInterface<IConsultarCapacidadZetasRespuesta, &IID_IConsultarCapacidadZetasRespuesta> IConsultarCapacidadZetasRespuestaPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IDriver Driver;
typedef IDriverPtr DriverPtr;
typedef IObtenerDatosDeInicializacionRespuesta ObtenerDatosDeInicializacionRespuesta;
typedef IObtenerDatosDeInicializacionRespuestaPtr ObtenerDatosDeInicializacionRespuestaPtr;
typedef ISubtotalRespuesta SubtotalRespuesta;
typedef ISubtotalRespuestaPtr SubtotalRespuestaPtr;
typedef ICierreZTotales CierreZTotales;
typedef ICierreZTotalesPtr CierreZTotalesPtr;
typedef IConsultarCapacidadZetasRespuesta ConsultarCapacidadZetasRespuesta;
typedef IConsultarCapacidadZetasRespuestaPtr ConsultarCapacidadZetasRespuestaPtr;

#define LIBID_OF_Driver (&LIBID_IFUniversal)
#define LIBID_OF_ObtenerDatosDeInicializacionRespuesta (&LIBID_IFUniversal)
#define LIBID_OF_SubtotalRespuesta (&LIBID_IFUniversal)
#define LIBID_OF_CierreZTotales (&LIBID_IFUniversal)
#define LIBID_OF_ConsultarCapacidadZetasRespuesta (&LIBID_IFUniversal)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum TipoDeComprobante
{
  tcNo_Fiscal = 0, 
  tcFactura_A = 1, 
  tcFactura_B = 2, 
  tcFactura_C = 3, 
  tcNota_Debito_A = 4, 
  tcNota_Debito_B = 5, 
  tcNota_Debito_C = 6, 
  tcNota_Credito_A = 7, 
  tcNota_Credito_B = 8, 
  tcNota_Credito_C = 9, 
  tcTique = 10, 
  tcRemito = 11, 
  tcTiqueNotaCredito = 12, 
  tcRemitoX = 13, 
  tcReciboX = 14, 
  tcReciboA = 15, 
  tcReciboB = 16, 
  tcReciboC = 17
} TipoDeComprobante;

typedef enum PuertoCOM
{
  pcCOM1 = 1, 
  pcCOM2 = 2, 
  pcCOM3 = 3, 
  pcCOM4 = 4, 
  pcCOM5 = 5, 
  pcCOM6 = 6, 
  pcCOM7 = 7, 
  pcCOM8 = 8, 
  pcCOM9 = 9
} PuertoCOM;

typedef enum Baudio
{
  bd2400 = 2400, 
  bd4800 = 4800, 
  bd9600 = 9600, 
  bd19200 = 19200, 
  bd38400 = 38400, 
  bd57600 = 57600, 
  bd115200 = 115200
} Baudio;

typedef enum ErrorNro
{
  errNoError = 0, 
  errControladorNoDisponible = 1, 
  errComandoInvalido = 2, 
  errParametroInvalido = 3, 
  errExcepcion = 4, 
  errMemoriaFiscal = 5, 
  errMemoriaTrabajo = 6, 
  errBateriaBaja = 7, 
  errComandoDesconocido = 8, 
  errDesbordamientoTotales = 9, 
  errMemoriaFiscalLlena = 10, 
  errMemoriaFiscalCasiLlena = 11, 
  errFallaImpresora = 13, 
  errImpresoraFueraLinea = 14, 
  errFaltaPapelDiario = 15, 
  errFaltaPapelTicket = 16, 
  errTapaImpresoraAbierta = 18, 
  errCajonCerradoOAusente = 19, 
  errCampoDatosInvalido = 20, 
  errCerrarJornada = 21
} ErrorNro;

typedef enum ModeloPrn
{
  modHasar715 = 0, 
  modHasar715v2 = 2, 
  modHasar615 = 3, 
  modHasar320 = 4, 
  modHasarPR4F = 5, 
  modHasarPR5F = 6, 
  modHasar950 = 7, 
  modHasar951 = 8, 
  modHasar441 = 9, 
  modHasar321 = 10, 
  modHasar322 = 11, 
  modHasar322v2 = 12, 
  modHasar330 = 13, 
  modHasar1120 = 14, 
  modHasarPL8F = 15, 
  modHasarPL8Fv2 = 16, 
  modHasarPL23 = 17, 
  modEpsonTM300AF = 18, 
  modEpsonTMU220AF = 19, 
  modEpsonTM2000 = 20, 
  modEpsonTM2000AFPlus = 21, 
  modEpsonLX300 = 22, 
  modHasarPT1000F = 23, 
  modEpsonTMT900FA = 24, 
  modEpsonTMU220AFII = 25
} ModeloPrn;

typedef enum TipoDeDocumento
{
  tdCUIT = 0, 
  tdDNI = 1, 
  tdPasaporte = 2, 
  tdCedula = 3, 
  tdNinguno = 4
} TipoDeDocumento;

typedef enum ResponsabilidadIVA
{
  riResponsableInscripto = 0, 
  riMonotributo = 1, 
  riExento = 3, 
  riConsumidorFinal = 4, 
  riNoResponsable = 5, 
  riNoCategorizado = 6
} ResponsabilidadIVA;

typedef enum TiposTributos
{
  SinImpuesto = 0, 
  ImpuestosNacionales = 1, 
  ImpuestosProvinciales = 2, 
  ImpuestosMunicipales = 3, 
  ImpuestosInternos = 4, 
  IIBB = 5, 
  PercepcionIVA = 6, 
  PercepcionIIBB = 7, 
  PercepcionImpuestosMunicipales = 8, 
  OtrasPercepciones = 9, 
  ImpuestoInternoItem = 10, 
  OtrosTributos = 11
} TiposTributos;

typedef enum CondicionesIVA
{
  NoGravado = 1, 
  Exento = 2, 
  Gravado = 7
} CondicionesIVA;

typedef enum UnidadesMedida
{
  SinDescripcion = 0, 
  Kilo = 1, 
  Metro = 2, 
  MetroCuadrado = 3, 
  MetroCubico = 4, 
  Litro = 5, 
  KWH = 6, 
  Unidad = 7, 
  Par = 8, 
  Docena = 9, 
  Quilate = 10, 
  Millar = 11, 
  MegaUInterActAntib = 12, 
  UnidadInternaActInmung = 13, 
  Gramo = 14, 
  Milimetro = 15, 
  MilimetroCubico = 16, 
  Kilometro = 17, 
  Hectolitro = 18, 
  MegaUnidadIntActInmung = 19, 
  Centimetro = 20, 
  KilogramoActivo = 21, 
  GramoActivo = 22, 
  GramoBase = 23, 
  UIACTHOR = 24, 
  JuegoPaqueteMazoNaipes = 25, 
  MUIACTHOR = 26, 
  CentimetroCubico = 27, 
  UIACTANT = 28, 
  Tonelada = 29, 
  DecametroCubico = 30, 
  HectometroCubico = 31, 
  KilometroCubico = 32, 
  Microgramo = 33, 
  Nanogramo = 34, 
  Picogramo = 35, 
  MUIACTANT = 36, 
  UIACTIG = 37, 
  Miligramo = 41, 
  Mililitro = 47, 
  Curie = 48, 
  Milicurie = 49, 
  Microcurie = 50, 
  UInterActHormonal = 51, 
  MegaUInterActHor = 52, 
  KilogramoBase = 53, 
  Gruesa = 54, 
  MUIACTIG = 55, 
  KilogramoBruto = 61, 
  Pack = 62, 
  Horma = 63, 
  Donacion = 90, 
  Ajustes = 91, 
  Anulacion = 96, 
  SenasAnticipos = 97, 
  OtrasUnidades = 98, 
  Bonificacion = 99
} UnidadesMedida;

typedef enum TiposPago
{
  Cambio = 0, 
  CartaDeCreditoDocumentario = 1, 
  CartaDeCreditoSimple = 2, 
  Cheque = 3, 
  ChequeCancelatorios = 4, 
  CreditoDocumentario = 5, 
  CuentaCorriente = 6, 
  Deposito = 7, 
  Efectivo = 8, 
  EndosoDeCheque = 9, 
  FacturaDeCredito = 10, 
  GarantiaBancaria = 11, 
  Giro = 12, 
  LetraDeCambio = 13, 
  MedioDePagoDeComercioExterior = 14, 
  OrdenDePagoDocumentaria = 15, 
  OrdenDePagoSimple = 16, 
  PagoContraReembolso = 17, 
  RemesaDocumentaria = 18, 
  RemesaSimple = 19, 
  TarjetaDeCredito = 20, 
  TarjetaDeDebito = 21, 
  Ticket = 22, 
  TransferenciaBancaria = 23, 
  TransferenciaNoBancaria = 24, 
  OtrosMediosPago = 99
} TiposPago;

typedef enum TipoImpuestoInterno
{
  tiFijo = 0, 
  tiPorcentaje = 1, 
  tiCoeficiente = 2
} TipoImpuestoInterno;

typedef enum TipoReporteElectronico
{
  trFecha = 0, 
  trNroCierre = 1
} TipoReporteElectronico;

// *********************************************************************//
// Interface: IDriver
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00AA0FC3-6850-4F18-BB90-9FE15E32ACBD}
// *********************************************************************//
interface IDriver  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_Error(Ifuniversal_tlb::ErrorNro* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_ErrorDesc(BSTR* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_Puerto(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE set_Puerto(long Value/*[in]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_Baudios(Ifuniversal_tlb::Baudio* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE set_Baudios(Ifuniversal_tlb::Baudio Value/*[in]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_Modelo(Ifuniversal_tlb::ModeloPrn* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE set_Modelo(Ifuniversal_tlb::ModeloPrn Value/*[in]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/, 
                                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                                 double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                                 double aImpuestosInternos/*[in]*/, 
                                                 OLE_CANCELBOOL* aResultado/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                                   double Precio/*[in]*/, double IVA/*[in]*/, 
                                                   double ImpuestosInternos/*[in]*/, 
                                                   Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                                   Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                                   long g2UnidadReferencia/*[in]*/, 
                                                   BSTR g2CodigoProducto/*[in]*/, 
                                                   BSTR g2CodigoInterno/*[in]*/, 
                                                   Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [242]
  virtual HRESULT STDMETHODCALLTYPE ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                             double aMonto/*[in]*/, 
                                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [209]
  virtual HRESULT STDMETHODCALLTYPE ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                                   BSTR g2DescripcionAdicional/*[in]*/, 
                                                   Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                                   long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                                   BSTR g2Referencia/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [243]
  virtual HRESULT STDMETHODCALLTYPE CerrarComprobante(void) = 0; // [210]
  virtual HRESULT STDMETHODCALLTYPE DatosCliente(BSTR aNombre/*[in]*/, 
                                                 Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                                                 BSTR aDocumento/*[in]*/, 
                                                 Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                                 BSTR aDireccion/*[in]*/, 
                                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [211]
  virtual HRESULT STDMETHODCALLTYPE CancelarComprobante(void) = 0; // [212]
  virtual HRESULT STDMETHODCALLTYPE Inicializar(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [213]
  virtual HRESULT STDMETHODCALLTYPE get_TotalDocFiscales(double* Value/*[out,retval]*/) = 0; // [214]
  virtual HRESULT STDMETHODCALLTYPE CierreX(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [215]
  virtual HRESULT STDMETHODCALLTYPE CierreZ(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [216]
  virtual HRESULT STDMETHODCALLTYPE ImprimirTextoFiscal(BSTR aTexto/*[in]*/, 
                                                        OLE_CANCELBOOL* aResultado/*[out,retval]*/) = 0; // [217]
  virtual HRESULT STDMETHODCALLTYPE InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                             double aMonto/*[in]*/, 
                                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [218]
  virtual HRESULT STDMETHODCALLTYPE InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, 
                                                          double aMonto/*[in]*/, 
                                                          double aAlicuota/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [219]
  virtual HRESULT STDMETHODCALLTYPE get_CbteEsFiscal(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [220]
  virtual HRESULT STDMETHODCALLTYPE DocumentoDeReferencia(BSTR aDocumento/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [221]
  virtual HRESULT STDMETHODCALLTYPE UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/, 
                                                      long* Resultado/*[out,retval]*/) = 0; // [222]
  virtual HRESULT STDMETHODCALLTYPE UltimoComprobanteCancelado(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [223]
  virtual HRESULT STDMETHODCALLTYPE get_ErroresEnExcepciones(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE set_ErroresEnExcepciones(OLE_CANCELBOOL Value/*[in]*/) = 0; // [224]
  virtual HRESULT STDMETHODCALLTYPE Finalizar(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [225]
  virtual HRESULT STDMETHODCALLTYPE DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                                  BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                                  BSTR NroAfiliado/*[in]*/, 
                                                  BSTR NombreAfiliado/*[in]*/, 
                                                  BSTR FechaVencimientoCarnet/*[in]*/, 
                                                  BSTR DomicilioVend1/*[in]*/, 
                                                  BSTR DomicilioVend2/*[in]*/, 
                                                  BSTR NombreEstablecimiento/*[in]*/, 
                                                  BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                                  BSTR Nota2/*[in]*/, 
                                                  OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [226]
  virtual HRESULT STDMETHODCALLTYPE CortarPapel(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [227]
  virtual HRESULT STDMETHODCALLTYPE ImprimirTextoNoFiscal(BSTR texto/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [228]
  virtual HRESULT STDMETHODCALLTYPE ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                                double Monto/*[in]*/, 
                                                                OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [229]
  virtual HRESULT STDMETHODCALLTYPE ReporteZFechas(BSTR FechaInicial/*[in]*/, 
                                                   BSTR FechaFinal/*[in]*/, 
                                                   OLE_CANCELBOOL Detallado/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [230]
  virtual HRESULT STDMETHODCALLTYPE ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                                    OLE_CANCELBOOL Detallado/*[in]*/, 
                                                    OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [231]
  virtual HRESULT STDMETHODCALLTYPE EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [232]
  virtual HRESULT STDMETHODCALLTYPE EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [233]
  virtual HRESULT STDMETHODCALLTYPE CerrarComprobanteNumero(long* Numero/*[out]*/, 
                                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [234]
  virtual HRESULT STDMETHODCALLTYPE get_Copias(long* Value/*[out,retval]*/) = 0; // [235]
  virtual HRESULT STDMETHODCALLTYPE set_Copias(long Value/*[in]*/) = 0; // [235]
  virtual HRESULT STDMETHODCALLTYPE get_Depurar(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [236]
  virtual HRESULT STDMETHODCALLTYPE set_Depurar(OLE_CANCELBOOL Value/*[in]*/) = 0; // [236]
  virtual HRESULT STDMETHODCALLTYPE ObtenerFechaHora(BSTR* FechaHora/*[out,retval]*/) = 0; // [237]
  virtual HRESULT STDMETHODCALLTYPE AbrirCajon(void) = 0; // [238]
  virtual HRESULT STDMETHODCALLTYPE ObtenerDatosDeInicializacion(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta** Resultado/*[out,retval]*/) = 0; // [239]
  virtual HRESULT STDMETHODCALLTYPE Subtotal(Ifuniversal_tlb::ISubtotalRespuesta** Resultado/*[out,retval]*/) = 0; // [240]
  virtual HRESULT STDMETHODCALLTYPE ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                          BSTR Descripcion/*[in]*/, 
                                                          double BaseImponible/*[in]*/, 
                                                          double Importe/*[in]*/, 
                                                          double Alicuota/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [241]
  virtual HRESULT STDMETHODCALLTYPE CargarLicencia(BSTR Licencia/*[in]*/) = 0; // [244]
  virtual HRESULT STDMETHODCALLTYPE Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/, 
                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [245]
  virtual HRESULT STDMETHODCALLTYPE DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                                            BSTR Documento/*[in]*/, 
                                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [246]
  virtual HRESULT STDMETHODCALLTYPE get_CierreZTotales(Ifuniversal_tlb::CierreZTotales** Value/*[out,retval]*/) = 0; // [247]
  virtual HRESULT STDMETHODCALLTYPE EspecificarFechaHora(BSTR FechaHora/*[in]*/, 
                                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [248]
  virtual HRESULT STDMETHODCALLTYPE get_PrecioBase(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [249]
  virtual HRESULT STDMETHODCALLTYPE set_PrecioBase(OLE_CANCELBOOL Value/*[in]*/) = 0; // [249]
  virtual HRESULT STDMETHODCALLTYPE CargarTransportista(BSTR RazonSocial/*[in]*/, 
                                                        double Cuit/*[in]*/, BSTR Domicilio/*[in]*/, 
                                                        BSTR NombreChofer/*[in]*/, 
                                                        Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                                        BSTR NumeroDocumento/*[in]*/, 
                                                        BSTR Dominio1/*[in]*/, BSTR Dominio2/*[in]*/, 
                                                        OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [250]
  virtual HRESULT STDMETHODCALLTYPE ImprimirConceptoRecibo(BSTR texto/*[in]*/, 
                                                           OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [251]
  virtual HRESULT STDMETHODCALLTYPE EspecificarIngresosBrutos(BSTR texto/*[in]*/, 
                                                              OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [252]
  virtual HRESULT STDMETHODCALLTYPE EspecificarInicioActividades(BSTR texto/*[in]*/, 
                                                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [253]
  virtual HRESULT STDMETHODCALLTYPE ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                          BSTR RangoFinal/*[in]*/, 
                                                                          BSTR NombreArchivo/*[in]*/, 
                                                                          Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/, 
                                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [254]
  virtual HRESULT STDMETHODCALLTYPE ObtenerSiguienteBloqueReporteElectronico(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [255]
  virtual HRESULT STDMETHODCALLTYPE ConsultarCapacidadZetas(OLE_CANCELBOOL* Resultado/*[out,retval]*/) = 0; // [256]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  Ifuniversal_tlb::ErrorNro __fastcall get_Error(void)
  {
    Ifuniversal_tlb::ErrorNro Value;
    OLECHECK(this->get_Error((Ifuniversal_tlb::ErrorNro*)&Value));
    return Value;
  }

  BSTR __fastcall get_ErrorDesc(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_ErrorDesc((BSTR*)&Value));
    return Value;
  }

  long __fastcall get_Puerto(void)
  {
    long Value;
    OLECHECK(this->get_Puerto((long*)&Value));
    return Value;
  }

  Ifuniversal_tlb::Baudio __fastcall get_Baudios(void)
  {
    Ifuniversal_tlb::Baudio Value;
    OLECHECK(this->get_Baudios((Ifuniversal_tlb::Baudio*)&Value));
    return Value;
  }

  Ifuniversal_tlb::ModeloPrn __fastcall get_Modelo(void)
  {
    Ifuniversal_tlb::ModeloPrn Value;
    OLECHECK(this->get_Modelo((Ifuniversal_tlb::ModeloPrn*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->AbrirComprobante(aTipoDeComprobante, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                         double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                         double aImpuestosInternos/*[in]*/)
  {
    OLE_CANCELBOOL aResultado;
    OLECHECK(this->ImprimirItem(aDescripcion, aCantidad, aPrecio, aIVA, aImpuestosInternos, (OLE_CANCELBOOL*)&aResultado));
    return aResultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                           double Precio/*[in]*/, double IVA/*[in]*/, 
                                           double ImpuestosInternos/*[in]*/, 
                                           Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                           Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                           long g2UnidadReferencia/*[in]*/, 
                                           BSTR g2CodigoProducto/*[in]*/, 
                                           BSTR g2CodigoInterno/*[in]*/, 
                                           Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirItem2g(Descripcion, Cantidad, Precio, IVA, ImpuestosInternos, 
                                  g2CondicionIVA, g2TipoImpuestoInterno, g2UnidadReferencia, 
                                  g2CodigoProducto, g2CodigoInterno, g2UnidadMedida, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                     double aMonto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirDescuentoGeneral(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirPago(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                           BSTR g2DescripcionAdicional/*[in]*/, 
                                           Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                           long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                           BSTR g2Referencia/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirPago2g(Descripcion, Monto, g2DescripcionAdicional, g2CodigoFormaPago, 
                                  g2Cuotas, g2Cupones, g2Referencia, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall DatosCliente(BSTR aNombre/*[in]*/, 
                                         Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                                         BSTR aDocumento/*[in]*/, 
                                         Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                         BSTR aDireccion/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->DatosCliente(aNombre, aTipoDeDocumento, aDocumento, aResponsIVA, aDireccion, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall Inicializar(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->Inicializar((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  double __fastcall get_TotalDocFiscales(void)
  {
    double Value;
    OLECHECK(this->get_TotalDocFiscales((double*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall CierreX(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->CierreX((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall CierreZ(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->CierreZ((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirTextoFiscal(BSTR aTexto/*[in]*/)
  {
    OLE_CANCELBOOL aResultado;
    OLECHECK(this->ImprimirTextoFiscal(aTexto, (OLE_CANCELBOOL*)&aResultado));
    return aResultado;
  }

  OLE_CANCELBOOL __fastcall InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                     double aMonto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->InformarPercepcionGlobal(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                                  double aAlicuota/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->InformarPercepcionIVA(aDescripcion, aMonto, aAlicuota, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall get_CbteEsFiscal(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_CbteEsFiscal((OLE_CANCELBOOL*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall DocumentoDeReferencia(BSTR aDocumento/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->DocumentoDeReferencia(aDocumento, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  long __fastcall UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/)
  {
    long Resultado;
    OLECHECK(this->UltimoComprobante(aTipoComprobante, (long*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall UltimoComprobanteCancelado(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->UltimoComprobanteCancelado((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall get_ErroresEnExcepciones(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_ErroresEnExcepciones((OLE_CANCELBOOL*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall Finalizar(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->Finalizar((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                          BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                          BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                                          BSTR FechaVencimientoCarnet/*[in]*/, 
                                          BSTR DomicilioVend1/*[in]*/, BSTR DomicilioVend2/*[in]*/, 
                                          BSTR NombreEstablecimiento/*[in]*/, 
                                          BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                          BSTR Nota2/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->DNFHFarmacias(ObraSocial, Coseguro1, Coseguro2, Coseguro3, NroAfiliado, 
                                 NombreAfiliado, FechaVencimientoCarnet, DomicilioVend1, 
                                 DomicilioVend2, NombreEstablecimiento, NroInterno, Nota1, Nota2, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall CortarPapel(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->CortarPapel((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirTextoNoFiscal(BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirTextoNoFiscal(texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                        double Monto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirDescuentoUltimoItem(Descripcion, Monto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                           OLE_CANCELBOOL Detallado/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ReporteZFechas(FechaInicial, FechaFinal, Detallado, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                            OLE_CANCELBOOL Detallado/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ReporteZNumeros(NroInicio, NroFin, Detallado, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->EspecificarEncabezado(Linea, texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->EspecificarPie(Linea, texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall CerrarComprobanteNumero(long* Numero/*[out]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->CerrarComprobanteNumero(Numero, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  long __fastcall get_Copias(void)
  {
    long Value;
    OLECHECK(this->get_Copias((long*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall get_Depurar(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_Depurar((OLE_CANCELBOOL*)&Value));
    return Value;
  }

  BSTR __fastcall ObtenerFechaHora(void)
  {
    BSTR FechaHora = 0;
    OLECHECK(this->ObtenerFechaHora((BSTR*)&FechaHora));
    return FechaHora;
  }

  Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* __fastcall ObtenerDatosDeInicializacion(void)
  {
    Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* Resultado;
    OLECHECK(this->ObtenerDatosDeInicializacion((Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta**)&Resultado));
    return Resultado;
  }

  Ifuniversal_tlb::ISubtotalRespuesta* __fastcall Subtotal(void)
  {
    Ifuniversal_tlb::ISubtotalRespuesta* Resultado;
    OLECHECK(this->Subtotal((Ifuniversal_tlb::ISubtotalRespuesta**)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                  BSTR Descripcion/*[in]*/, 
                                                  double BaseImponible/*[in]*/, 
                                                  double Importe/*[in]*/, double Alicuota/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirOtrosTributos(Codigo, Descripcion, BaseImponible, Importe, Alicuota, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->Conectar(DireccionIP, Puerto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                                    BSTR Documento/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->DocumentoDeReferencia2g(TipoComprobante, Documento, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  Ifuniversal_tlb::CierreZTotales* __fastcall get_CierreZTotales(void)
  {
    Ifuniversal_tlb::CierreZTotales* Value;
    OLECHECK(this->get_CierreZTotales((Ifuniversal_tlb::CierreZTotales**)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall EspecificarFechaHora(BSTR FechaHora/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->EspecificarFechaHora(FechaHora, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall get_PrecioBase(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_PrecioBase((OLE_CANCELBOOL*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                                BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                                Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                                BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                                BSTR Dominio2/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->CargarTransportista(RazonSocial, Cuit, Domicilio, NombreChofer, TipoDocumento, 
                                       NumeroDocumento, Dominio1, Dominio2, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ImprimirConceptoRecibo(BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ImprimirConceptoRecibo(texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall EspecificarIngresosBrutos(BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->EspecificarIngresosBrutos(texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall EspecificarInicioActividades(BSTR texto/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->EspecificarInicioActividades(texto, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                  BSTR RangoFinal/*[in]*/, 
                                                                  BSTR NombreArchivo/*[in]*/, 
                                                                  Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ObtenerPrimerBloqueReporteElectronico(RangoInicial, RangoFinal, NombreArchivo, 
                                                         TipoReporte, (OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ObtenerSiguienteBloqueReporteElectronico(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ObtenerSiguienteBloqueReporteElectronico((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }

  OLE_CANCELBOOL __fastcall ConsultarCapacidadZetas(void)
  {
    OLE_CANCELBOOL Resultado;
    OLECHECK(this->ConsultarCapacidadZetas((OLE_CANCELBOOL*)&Resultado));
    return Resultado;
  }


  __property   Ifuniversal_tlb::ErrorNro Error = {read = get_Error};
  __property   BSTR            ErrorDesc = {read = get_ErrorDesc};
  __property   long            Puerto = {read = get_Puerto, write = set_Puerto};
  __property   Ifuniversal_tlb::Baudio Baudios = {read = get_Baudios, write = set_Baudios};
  __property   Ifuniversal_tlb::ModeloPrn Modelo = {read = get_Modelo, write = set_Modelo};
  __property   double          TotalDocFiscales = {read = get_TotalDocFiscales};
  __property   OLE_CANCELBOOL  CbteEsFiscal = {read = get_CbteEsFiscal};
  __property   OLE_CANCELBOOL  ErroresEnExcepciones = {read = get_ErroresEnExcepciones, write = set_ErroresEnExcepciones};
  __property   long            Copias = {read = get_Copias, write = set_Copias};
  __property   OLE_CANCELBOOL  Depurar = {read = get_Depurar, write = set_Depurar};
  __property   Ifuniversal_tlb::CierreZTotales* CierreZTotales = {read = get_CierreZTotales};
  __property   OLE_CANCELBOOL  PrecioBase = {read = get_PrecioBase, write = set_PrecioBase};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IObtenerDatosDeInicializacionRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44C8E088-C222-4FC1-94ED-9395F5FE32C2}
// *********************************************************************//
interface IObtenerDatosDeInicializacionRespuesta  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_NroCUIT(BSTR* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_RazonSocial(BSTR* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_NroSerie(BSTR* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FechaInicializacion(BSTR* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_NroPOS(BSTR* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_FechaIniActividades(BSTR* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_CodIngBrutos(BSTR* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_RespIVA(BSTR* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [209]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_NroCUIT(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NroCUIT((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_RazonSocial(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_RazonSocial((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NroSerie(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NroSerie((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_FechaInicializacion(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_FechaInicializacion((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_NroPOS(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_NroPOS((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_FechaIniActividades(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_FechaIniActividades((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_CodIngBrutos(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_CodIngBrutos((BSTR*)&Value));
    return Value;
  }

  BSTR __fastcall get_RespIVA(void)
  {
    BSTR Value = 0;
    OLECHECK(this->get_RespIVA((BSTR*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall get_Resultado(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_Resultado((OLE_CANCELBOOL*)&Value));
    return Value;
  }


  __property   BSTR            NroCUIT = {read = get_NroCUIT};
  __property   BSTR            RazonSocial = {read = get_RazonSocial};
  __property   BSTR            NroSerie = {read = get_NroSerie};
  __property   BSTR            FechaInicializacion = {read = get_FechaInicializacion};
  __property   BSTR            NroPOS = {read = get_NroPOS};
  __property   BSTR            FechaIniActividades = {read = get_FechaIniActividades};
  __property   BSTR            CodIngBrutos = {read = get_CodIngBrutos};
  __property   BSTR            RespIVA = {read = get_RespIVA};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ISubtotalRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {09BDCB7C-4945-4231-AB0C-628CF69E8561}
// *********************************************************************//
interface ISubtotalRespuesta  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CantidadItemsVendidos(double* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_MontoVentas(double* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_MontoIVA(double* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_MontoPagado(double* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_MontoIVANoInscripto(double* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_MontoImpuestosInternos(double* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_MontoNeto(double* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/) = 0; // [207]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_CantidadItemsVendidos(void)
  {
    double Value;
    OLECHECK(this->get_CantidadItemsVendidos((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoVentas(void)
  {
    double Value;
    OLECHECK(this->get_MontoVentas((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoIVA(void)
  {
    double Value;
    OLECHECK(this->get_MontoIVA((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoPagado(void)
  {
    double Value;
    OLECHECK(this->get_MontoPagado((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoIVANoInscripto(void)
  {
    double Value;
    OLECHECK(this->get_MontoIVANoInscripto((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoImpuestosInternos(void)
  {
    double Value;
    OLECHECK(this->get_MontoImpuestosInternos((double*)&Value));
    return Value;
  }

  double __fastcall get_MontoNeto(void)
  {
    double Value;
    OLECHECK(this->get_MontoNeto((double*)&Value));
    return Value;
  }

  OLE_CANCELBOOL __fastcall get_Resultado(void)
  {
    OLE_CANCELBOOL Value;
    OLECHECK(this->get_Resultado((OLE_CANCELBOOL*)&Value));
    return Value;
  }


  __property   double          CantidadItemsVendidos = {read = get_CantidadItemsVendidos};
  __property   double          MontoVentas = {read = get_MontoVentas};
  __property   double          MontoIVA = {read = get_MontoIVA};
  __property   double          MontoPagado = {read = get_MontoPagado};
  __property   double          MontoIVANoInscripto = {read = get_MontoIVANoInscripto};
  __property   double          MontoImpuestosInternos = {read = get_MontoImpuestosInternos};
  __property   double          MontoNeto = {read = get_MontoNeto};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: ICierreZTotales
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7973DAB-A411-454D-927E-517037721A21}
// *********************************************************************//
interface ICierreZTotales  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_FNDTotalVentas(double* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_FNDTotalIVA(double* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_FNDTotalImpuestosInternos(double* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_FNDTotalOtrosTributos(double* Value/*[out,retval]*/) = 0; // [204]
  virtual HRESULT STDMETHODCALLTYPE get_NCTotalVentas(double* Value/*[out,retval]*/) = 0; // [205]
  virtual HRESULT STDMETHODCALLTYPE get_NCTotalIVA(double* Value/*[out,retval]*/) = 0; // [206]
  virtual HRESULT STDMETHODCALLTYPE get_NCTotalImpuestosInternos(double* Value/*[out,retval]*/) = 0; // [207]
  virtual HRESULT STDMETHODCALLTYPE get_NCTotalOtrosTributos(double* Value/*[out,retval]*/) = 0; // [208]
  virtual HRESULT STDMETHODCALLTYPE get_NroCierre(long* Value/*[out,retval]*/) = 0; // [209]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  double __fastcall get_FNDTotalVentas(void)
  {
    double Value;
    OLECHECK(this->get_FNDTotalVentas((double*)&Value));
    return Value;
  }

  double __fastcall get_FNDTotalIVA(void)
  {
    double Value;
    OLECHECK(this->get_FNDTotalIVA((double*)&Value));
    return Value;
  }

  double __fastcall get_FNDTotalImpuestosInternos(void)
  {
    double Value;
    OLECHECK(this->get_FNDTotalImpuestosInternos((double*)&Value));
    return Value;
  }

  double __fastcall get_FNDTotalOtrosTributos(void)
  {
    double Value;
    OLECHECK(this->get_FNDTotalOtrosTributos((double*)&Value));
    return Value;
  }

  double __fastcall get_NCTotalVentas(void)
  {
    double Value;
    OLECHECK(this->get_NCTotalVentas((double*)&Value));
    return Value;
  }

  double __fastcall get_NCTotalIVA(void)
  {
    double Value;
    OLECHECK(this->get_NCTotalIVA((double*)&Value));
    return Value;
  }

  double __fastcall get_NCTotalImpuestosInternos(void)
  {
    double Value;
    OLECHECK(this->get_NCTotalImpuestosInternos((double*)&Value));
    return Value;
  }

  double __fastcall get_NCTotalOtrosTributos(void)
  {
    double Value;
    OLECHECK(this->get_NCTotalOtrosTributos((double*)&Value));
    return Value;
  }

  long __fastcall get_NroCierre(void)
  {
    long Value;
    OLECHECK(this->get_NroCierre((long*)&Value));
    return Value;
  }


  __property   double          FNDTotalVentas = {read = get_FNDTotalVentas};
  __property   double          FNDTotalIVA = {read = get_FNDTotalIVA};
  __property   double          FNDTotalImpuestosInternos = {read = get_FNDTotalImpuestosInternos};
  __property   double          FNDTotalOtrosTributos = {read = get_FNDTotalOtrosTributos};
  __property   double          NCTotalVentas = {read = get_NCTotalVentas};
  __property   double          NCTotalIVA = {read = get_NCTotalIVA};
  __property   double          NCTotalImpuestosInternos = {read = get_NCTotalImpuestosInternos};
  __property   double          NCTotalOtrosTributos = {read = get_NCTotalOtrosTributos};
  __property   long            NroCierre = {read = get_NroCierre};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: IConsultarCapacidadZetasRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D33F62C-0EA9-44D4-8971-2333F441D7EE}
// *********************************************************************//
interface IConsultarCapacidadZetasRespuesta  : public IDispatch
{
public:
  virtual HRESULT STDMETHODCALLTYPE get_CantidadDeZetasRemanente(long* Value/*[out,retval]*/) = 0; // [201]
  virtual HRESULT STDMETHODCALLTYPE get_UltimaZeta(long* Value/*[out,retval]*/) = 0; // [202]
  virtual HRESULT STDMETHODCALLTYPE get_UltimaZetaBajada(long* Value/*[out,retval]*/) = 0; // [203]
  virtual HRESULT STDMETHODCALLTYPE get_UltimaZetaBorrable(long* Value/*[out,retval]*/) = 0; // [204]

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_CantidadDeZetasRemanente(void)
  {
    long Value;
    OLECHECK(this->get_CantidadDeZetasRemanente((long*)&Value));
    return Value;
  }

  long __fastcall get_UltimaZeta(void)
  {
    long Value;
    OLECHECK(this->get_UltimaZeta((long*)&Value));
    return Value;
  }

  long __fastcall get_UltimaZetaBajada(void)
  {
    long Value;
    OLECHECK(this->get_UltimaZetaBajada((long*)&Value));
    return Value;
  }

  long __fastcall get_UltimaZetaBorrable(void)
  {
    long Value;
    OLECHECK(this->get_UltimaZetaBorrable((long*)&Value));
    return Value;
  }


  __property   long            CantidadDeZetasRemanente = {read = get_CantidadDeZetasRemanente};
  __property   long            UltimaZeta = {read = get_UltimaZeta};
  __property   long            UltimaZetaBajada = {read = get_UltimaZetaBajada};
  __property   long            UltimaZetaBorrable = {read = get_UltimaZetaBorrable};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIDriver
// Interface: IDriver
// *********************************************************************//
template <class T /* IDriver */ >
class TCOMIDriverT : public TComInterface<IDriver>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIDriverT() {}
  TCOMIDriverT(IDriver *intf, bool addRef = false) : TComInterface<IDriver>(intf, addRef) {}
  TCOMIDriverT(const TCOMIDriverT& src) : TComInterface<IDriver>(src) {}
  TCOMIDriverT& operator=(const TCOMIDriverT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_Error(Ifuniversal_tlb::ErrorNro* Value/*[out,retval]*/);
  Ifuniversal_tlb::ErrorNro __fastcall get_Error(void);
  HRESULT         __fastcall get_ErrorDesc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrorDesc(void);
  HRESULT         __fastcall get_Puerto(long* Value/*[out,retval]*/);
  long            __fastcall get_Puerto(void);
  HRESULT         __fastcall set_Puerto(long Value/*[in]*/);
  HRESULT         __fastcall get_Baudios(Ifuniversal_tlb::Baudio* Value/*[out,retval]*/);
  Ifuniversal_tlb::Baudio __fastcall get_Baudios(void);
  HRESULT         __fastcall set_Baudios(Ifuniversal_tlb::Baudio Value/*[in]*/);
  HRESULT         __fastcall get_Modelo(Ifuniversal_tlb::ModeloPrn* Value/*[out,retval]*/);
  Ifuniversal_tlb::ModeloPrn __fastcall get_Modelo(void);
  HRESULT         __fastcall set_Modelo(Ifuniversal_tlb::ModeloPrn Value/*[in]*/);
  HRESULT         __fastcall AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/, 
                                              OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/);
  HRESULT         __fastcall ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                          double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                          double aImpuestosInternos/*[in]*/, 
                                          OLE_CANCELBOOL* aResultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                          double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                          double aImpuestosInternos/*[in]*/);
  HRESULT         __fastcall ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                            double Precio/*[in]*/, double IVA/*[in]*/, 
                                            double ImpuestosInternos/*[in]*/, 
                                            Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                            Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                            long g2UnidadReferencia/*[in]*/, 
                                            BSTR g2CodigoProducto/*[in]*/, 
                                            BSTR g2CodigoInterno/*[in]*/, 
                                            Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                            double Precio/*[in]*/, double IVA/*[in]*/, 
                                            double ImpuestosInternos/*[in]*/, 
                                            Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                            Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                            long g2UnidadReferencia/*[in]*/, 
                                            BSTR g2CodigoProducto/*[in]*/, 
                                            BSTR g2CodigoInterno/*[in]*/, 
                                            Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/);
  HRESULT         __fastcall ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/, 
                                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/);
  HRESULT         __fastcall ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/);
  HRESULT         __fastcall ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                            BSTR g2DescripcionAdicional/*[in]*/, 
                                            Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                            long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                            BSTR g2Referencia/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                            BSTR g2DescripcionAdicional/*[in]*/, 
                                            Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                            long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                            BSTR g2Referencia/*[in]*/);
  HRESULT         __fastcall CerrarComprobante(void);
  HRESULT         __fastcall DatosCliente(BSTR aNombre/*[in]*/, 
                                          Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                                          BSTR aDocumento/*[in]*/, 
                                          Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                          BSTR aDireccion/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DatosCliente(BSTR aNombre/*[in]*/, 
                                          Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                                          BSTR aDocumento/*[in]*/, 
                                          Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                          BSTR aDireccion/*[in]*/);
  HRESULT         __fastcall CancelarComprobante(void);
  HRESULT         __fastcall Inicializar(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Inicializar(void);
  HRESULT         __fastcall get_TotalDocFiscales(double* Value/*[out,retval]*/);
  double          __fastcall get_TotalDocFiscales(void);
  HRESULT         __fastcall CierreX(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CierreX(void);
  HRESULT         __fastcall CierreZ(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CierreZ(void);
  HRESULT         __fastcall ImprimirTextoFiscal(BSTR aTexto/*[in]*/, 
                                                 OLE_CANCELBOOL* aResultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirTextoFiscal(BSTR aTexto/*[in]*/);
  HRESULT         __fastcall InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/, 
                                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/);
  HRESULT         __fastcall InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                                   double aAlicuota/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                                   double aAlicuota/*[in]*/);
  HRESULT         __fastcall get_CbteEsFiscal(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_CbteEsFiscal(void);
  HRESULT         __fastcall DocumentoDeReferencia(BSTR aDocumento/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DocumentoDeReferencia(BSTR aDocumento/*[in]*/);
  HRESULT         __fastcall UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/, 
                                               long* Resultado/*[out,retval]*/);
  long            __fastcall UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/);
  HRESULT         __fastcall UltimoComprobanteCancelado(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall UltimoComprobanteCancelado(void);
  HRESULT         __fastcall get_ErroresEnExcepciones(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_ErroresEnExcepciones(void);
  HRESULT         __fastcall set_ErroresEnExcepciones(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall Finalizar(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Finalizar(void);
  HRESULT         __fastcall DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                           BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                           BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                                           BSTR FechaVencimientoCarnet/*[in]*/, 
                                           BSTR DomicilioVend1/*[in]*/, BSTR DomicilioVend2/*[in]*/, 
                                           BSTR NombreEstablecimiento/*[in]*/, 
                                           BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                           BSTR Nota2/*[in]*/, 
                                           OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                           BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                           BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                                           BSTR FechaVencimientoCarnet/*[in]*/, 
                                           BSTR DomicilioVend1/*[in]*/, BSTR DomicilioVend2/*[in]*/, 
                                           BSTR NombreEstablecimiento/*[in]*/, 
                                           BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                           BSTR Nota2/*[in]*/);
  HRESULT         __fastcall CortarPapel(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CortarPapel(void);
  HRESULT         __fastcall ImprimirTextoNoFiscal(BSTR texto/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirTextoNoFiscal(BSTR texto/*[in]*/);
  HRESULT         __fastcall ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                         double Monto/*[in]*/, 
                                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                         double Monto/*[in]*/);
  HRESULT         __fastcall ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                            OLE_CANCELBOOL Detallado/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                            OLE_CANCELBOOL Detallado/*[in]*/);
  HRESULT         __fastcall ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                             OLE_CANCELBOOL Detallado/*[in]*/, 
                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                             OLE_CANCELBOOL Detallado/*[in]*/);
  HRESULT         __fastcall EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/);
  HRESULT         __fastcall CerrarComprobanteNumero(long* Numero/*[out]*/, 
                                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CerrarComprobanteNumero(long* Numero/*[out]*/);
  HRESULT         __fastcall get_Copias(long* Value/*[out,retval]*/);
  long            __fastcall get_Copias(void);
  HRESULT         __fastcall set_Copias(long Value/*[in]*/);
  HRESULT         __fastcall get_Depurar(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Depurar(void);
  HRESULT         __fastcall set_Depurar(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall ObtenerFechaHora(BSTR* FechaHora/*[out,retval]*/);
  BSTR            __fastcall ObtenerFechaHora(void);
  HRESULT         __fastcall AbrirCajon(void);
  HRESULT         __fastcall ObtenerDatosDeInicializacion(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta** Resultado/*[out,retval]*/);
  Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* __fastcall ObtenerDatosDeInicializacion(void);
  HRESULT         __fastcall Subtotal(Ifuniversal_tlb::ISubtotalRespuesta** Resultado/*[out,retval]*/);
  Ifuniversal_tlb::ISubtotalRespuesta* __fastcall Subtotal(void);
  HRESULT         __fastcall ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                   BSTR Descripcion/*[in]*/, 
                                                   double BaseImponible/*[in]*/, 
                                                   double Importe/*[in]*/, double Alicuota/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                   BSTR Descripcion/*[in]*/, 
                                                   double BaseImponible/*[in]*/, 
                                                   double Importe/*[in]*/, double Alicuota/*[in]*/);
  HRESULT         __fastcall CargarLicencia(BSTR Licencia/*[in]*/);
  HRESULT         __fastcall Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/, 
                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/);
  HRESULT         __fastcall DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                                     BSTR Documento/*[in]*/, 
                                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                                     BSTR Documento/*[in]*/);
  HRESULT         __fastcall get_CierreZTotales(Ifuniversal_tlb::CierreZTotales** Value/*[out,retval]*/);
  HRESULT         __fastcall get_CierreZTotales(Ifuniversal_tlb::CierreZTotalesPtr* Value/*[out,retval]*/);
  Ifuniversal_tlb::CierreZTotalesPtr __fastcall get_CierreZTotales(void);
  HRESULT         __fastcall EspecificarFechaHora(BSTR FechaHora/*[in]*/, 
                                                  OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarFechaHora(BSTR FechaHora/*[in]*/);
  HRESULT         __fastcall get_PrecioBase(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_PrecioBase(void);
  HRESULT         __fastcall set_PrecioBase(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                                 BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                                 Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                                 BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                                 BSTR Dominio2/*[in]*/, 
                                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                                 BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                                 Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                                 BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                                 BSTR Dominio2/*[in]*/);
  HRESULT         __fastcall ImprimirConceptoRecibo(BSTR texto/*[in]*/, 
                                                    OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirConceptoRecibo(BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarIngresosBrutos(BSTR texto/*[in]*/, 
                                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarIngresosBrutos(BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarInicioActividades(BSTR texto/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarInicioActividades(BSTR texto/*[in]*/);
  HRESULT         __fastcall ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                   BSTR RangoFinal/*[in]*/, 
                                                                   BSTR NombreArchivo/*[in]*/, 
                                                                   Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/, 
                                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                   BSTR RangoFinal/*[in]*/, 
                                                                   BSTR NombreArchivo/*[in]*/, 
                                                                   Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/);
  HRESULT         __fastcall ObtenerSiguienteBloqueReporteElectronico(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ObtenerSiguienteBloqueReporteElectronico(void);
  HRESULT         __fastcall ConsultarCapacidadZetas(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ConsultarCapacidadZetas(void);

  __property   Ifuniversal_tlb::ErrorNro Error = {read = get_Error};
  __property   BSTR            ErrorDesc = {read = get_ErrorDesc};
  __property   long            Puerto = {read = get_Puerto, write = set_Puerto};
  __property   Ifuniversal_tlb::Baudio Baudios = {read = get_Baudios, write = set_Baudios};
  __property   Ifuniversal_tlb::ModeloPrn Modelo = {read = get_Modelo, write = set_Modelo};
  __property   double          TotalDocFiscales = {read = get_TotalDocFiscales};
  __property   OLE_CANCELBOOL  CbteEsFiscal = {read = get_CbteEsFiscal};
  __property   OLE_CANCELBOOL  ErroresEnExcepciones = {read = get_ErroresEnExcepciones, write = set_ErroresEnExcepciones};
  __property   long            Copias = {read = get_Copias, write = set_Copias};
  __property   OLE_CANCELBOOL  Depurar = {read = get_Depurar, write = set_Depurar};
  __property   Ifuniversal_tlb::CierreZTotalesPtr CierreZTotales = {read = get_CierreZTotales};
  __property   OLE_CANCELBOOL  PrecioBase = {read = get_PrecioBase, write = set_PrecioBase};
};
typedef TCOMIDriverT<IDriver> TCOMIDriver;

// *********************************************************************//
// DispIntf:  IDriver
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00AA0FC3-6850-4F18-BB90-9FE15E32ACBD}
// *********************************************************************//
template<class T>
class IDriverDispT : public TAutoDriver<IDriver>
{
public:
  IDriverDispT(){}

  IDriverDispT(IDriver *pintf)
  {
    TAutoDriver<IDriver>::Bind(pintf, false);
  }

  IDriverDispT(IDriverPtr pintf)
  {
    TAutoDriver<IDriver>::Bind(pintf, true);
  }

  IDriverDispT& operator=(IDriver *pintf)
  {
    TAutoDriver<IDriver>::Bind(pintf, false);
    return *this;
  }

  IDriverDispT& operator=(IDriverPtr pintf)
  {
    TAutoDriver<IDriver>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_Driver));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_Driver);
  }

  HRESULT         __fastcall get_Error(Ifuniversal_tlb::ErrorNro* Value/*[out,retval]*/);
  Ifuniversal_tlb::ErrorNro __fastcall get_Error(void);
  HRESULT         __fastcall get_ErrorDesc(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_ErrorDesc(void);
  HRESULT         __fastcall get_Puerto(long* Value/*[out,retval]*/);
  long            __fastcall get_Puerto(void);
  HRESULT         __fastcall set_Puerto(long Value/*[in]*/);
  HRESULT         __fastcall get_Baudios(Ifuniversal_tlb::Baudio* Value/*[out,retval]*/);
  Ifuniversal_tlb::Baudio __fastcall get_Baudios(void);
  HRESULT         __fastcall set_Baudios(Ifuniversal_tlb::Baudio Value/*[in]*/);
  HRESULT         __fastcall get_Modelo(Ifuniversal_tlb::ModeloPrn* Value/*[out,retval]*/);
  Ifuniversal_tlb::ModeloPrn __fastcall get_Modelo(void);
  HRESULT         __fastcall set_Modelo(Ifuniversal_tlb::ModeloPrn Value/*[in]*/);
  HRESULT         __fastcall AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/
                                              , OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/);
  HRESULT         __fastcall ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                          double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                          double aImpuestosInternos/*[in]*/, 
                                          OLE_CANCELBOOL* aResultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                                          double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                                          double aImpuestosInternos/*[in]*/);
  HRESULT         __fastcall ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                            double Precio/*[in]*/, double IVA/*[in]*/, 
                                            double ImpuestosInternos/*[in]*/, 
                                            Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                            Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/
                                            , long g2UnidadReferencia/*[in]*/, 
                                            BSTR g2CodigoProducto/*[in]*/, 
                                            BSTR g2CodigoInterno/*[in]*/, 
                                            Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                            double Precio/*[in]*/, double IVA/*[in]*/, 
                                            double ImpuestosInternos/*[in]*/, 
                                            Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                            Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                            long g2UnidadReferencia/*[in]*/, 
                                            BSTR g2CodigoProducto/*[in]*/, 
                                            BSTR g2CodigoInterno/*[in]*/, 
                                            Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/);
  HRESULT         __fastcall ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/, 
                                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/);
  HRESULT         __fastcall ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/);
  HRESULT         __fastcall ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                            BSTR g2DescripcionAdicional/*[in]*/, 
                                            Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                            long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                            BSTR g2Referencia/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                            BSTR g2DescripcionAdicional/*[in]*/, 
                                            Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                            long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                            BSTR g2Referencia/*[in]*/);
  HRESULT         __fastcall CerrarComprobante();
  HRESULT         __fastcall DatosCliente(BSTR aNombre/*[in]*/, 
                                          Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/
                                          , BSTR aDocumento/*[in]*/, 
                                          Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                          BSTR aDireccion/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DatosCliente(BSTR aNombre/*[in]*/, 
                                          Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                                          BSTR aDocumento/*[in]*/, 
                                          Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                                          BSTR aDireccion/*[in]*/);
  HRESULT         __fastcall CancelarComprobante();
  HRESULT         __fastcall Inicializar(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Inicializar(void);
  HRESULT         __fastcall get_TotalDocFiscales(double* Value/*[out,retval]*/);
  double          __fastcall get_TotalDocFiscales(void);
  HRESULT         __fastcall CierreX(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CierreX(void);
  HRESULT         __fastcall CierreZ(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CierreZ(void);
  HRESULT         __fastcall ImprimirTextoFiscal(BSTR aTexto/*[in]*/, 
                                                 OLE_CANCELBOOL* aResultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirTextoFiscal(BSTR aTexto/*[in]*/);
  HRESULT         __fastcall InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/, 
                                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, 
                                                      double aMonto/*[in]*/);
  HRESULT         __fastcall InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/
                                                   , double aAlicuota/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                                   double aAlicuota/*[in]*/);
  HRESULT         __fastcall get_CbteEsFiscal(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_CbteEsFiscal(void);
  HRESULT         __fastcall DocumentoDeReferencia(BSTR aDocumento/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DocumentoDeReferencia(BSTR aDocumento/*[in]*/);
  HRESULT         __fastcall UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/
                                               , long* Resultado/*[out,retval]*/);
  long            __fastcall UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/);
  HRESULT         __fastcall UltimoComprobanteCancelado(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall UltimoComprobanteCancelado(void);
  HRESULT         __fastcall get_ErroresEnExcepciones(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_ErroresEnExcepciones(void);
  HRESULT         __fastcall set_ErroresEnExcepciones(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall Finalizar(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Finalizar(void);
  HRESULT         __fastcall DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                           BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                           BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                                           BSTR FechaVencimientoCarnet/*[in]*/, 
                                           BSTR DomicilioVend1/*[in]*/, BSTR DomicilioVend2/*[in]*/
                                           , BSTR NombreEstablecimiento/*[in]*/, 
                                           BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                           BSTR Nota2/*[in]*/, 
                                           OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                                           BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                                           BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                                           BSTR FechaVencimientoCarnet/*[in]*/, 
                                           BSTR DomicilioVend1/*[in]*/, BSTR DomicilioVend2/*[in]*/, 
                                           BSTR NombreEstablecimiento/*[in]*/, 
                                           BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, 
                                           BSTR Nota2/*[in]*/);
  HRESULT         __fastcall CortarPapel(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CortarPapel(void);
  HRESULT         __fastcall ImprimirTextoNoFiscal(BSTR texto/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirTextoNoFiscal(BSTR texto/*[in]*/);
  HRESULT         __fastcall ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                         double Monto/*[in]*/, 
                                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, 
                                                         double Monto/*[in]*/);
  HRESULT         __fastcall ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                            OLE_CANCELBOOL Detallado/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                            OLE_CANCELBOOL Detallado/*[in]*/);
  HRESULT         __fastcall ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                             OLE_CANCELBOOL Detallado/*[in]*/, 
                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                             OLE_CANCELBOOL Detallado/*[in]*/);
  HRESULT         __fastcall EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                            OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/);
  HRESULT         __fastcall CerrarComprobanteNumero(long* Numero/*[out]*/, 
                                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CerrarComprobanteNumero(long* Numero/*[out]*/);
  HRESULT         __fastcall get_Copias(long* Value/*[out,retval]*/);
  long            __fastcall get_Copias(void);
  HRESULT         __fastcall set_Copias(long Value/*[in]*/);
  HRESULT         __fastcall get_Depurar(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Depurar(void);
  HRESULT         __fastcall set_Depurar(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall ObtenerFechaHora(BSTR* FechaHora/*[out,retval]*/);
  BSTR            __fastcall ObtenerFechaHora(void);
  HRESULT         __fastcall AbrirCajon();
  HRESULT         __fastcall ObtenerDatosDeInicializacion(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta** Resultado/*[out,retval]*/);
  Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* __fastcall ObtenerDatosDeInicializacion(void);
  HRESULT         __fastcall Subtotal(Ifuniversal_tlb::ISubtotalRespuesta** Resultado/*[out,retval]*/);
  Ifuniversal_tlb::ISubtotalRespuesta* __fastcall Subtotal(void);
  HRESULT         __fastcall ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                   BSTR Descripcion/*[in]*/, 
                                                   double BaseImponible/*[in]*/, 
                                                   double Importe/*[in]*/, double Alicuota/*[in]*/, 
                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                                   BSTR Descripcion/*[in]*/, 
                                                   double BaseImponible/*[in]*/, 
                                                   double Importe/*[in]*/, double Alicuota/*[in]*/);
  HRESULT         __fastcall CargarLicencia(BSTR Licencia/*[in]*/);
  HRESULT         __fastcall Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/, 
                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/);
  HRESULT         __fastcall DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/
                                                     , BSTR Documento/*[in]*/, 
                                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                                     BSTR Documento/*[in]*/);
  HRESULT         __fastcall get_CierreZTotales(Ifuniversal_tlb::CierreZTotales** Value/*[out,retval]*/);
  Ifuniversal_tlb::CierreZTotales* __fastcall get_CierreZTotales(void);
  HRESULT         __fastcall EspecificarFechaHora(BSTR FechaHora/*[in]*/, 
                                                  OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarFechaHora(BSTR FechaHora/*[in]*/);
  HRESULT         __fastcall get_PrecioBase(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_PrecioBase(void);
  HRESULT         __fastcall set_PrecioBase(OLE_CANCELBOOL Value/*[in]*/);
  HRESULT         __fastcall CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                                 BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                                 Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/
                                                 , BSTR NumeroDocumento/*[in]*/, 
                                                 BSTR Dominio1/*[in]*/, BSTR Dominio2/*[in]*/, 
                                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                                 BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                                 Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                                 BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                                 BSTR Dominio2/*[in]*/);
  HRESULT         __fastcall ImprimirConceptoRecibo(BSTR texto/*[in]*/, 
                                                    OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ImprimirConceptoRecibo(BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarIngresosBrutos(BSTR texto/*[in]*/, 
                                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarIngresosBrutos(BSTR texto/*[in]*/);
  HRESULT         __fastcall EspecificarInicioActividades(BSTR texto/*[in]*/, 
                                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall EspecificarInicioActividades(BSTR texto/*[in]*/);
  HRESULT         __fastcall ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                   BSTR RangoFinal/*[in]*/, 
                                                                   BSTR NombreArchivo/*[in]*/, 
                                                                   Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/
                                                                   , 
                                                                   OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                                   BSTR RangoFinal/*[in]*/, 
                                                                   BSTR NombreArchivo/*[in]*/, 
                                                                   Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/);
  HRESULT         __fastcall ObtenerSiguienteBloqueReporteElectronico(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ObtenerSiguienteBloqueReporteElectronico(void);
  HRESULT         __fastcall ConsultarCapacidadZetas(OLE_CANCELBOOL* Resultado/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall ConsultarCapacidadZetas(void);

  __property   Ifuniversal_tlb::ErrorNro Error = {read = get_Error};
  __property   BSTR            ErrorDesc = {read = get_ErrorDesc};
  __property   long            Puerto = {read = get_Puerto, write = set_Puerto};
  __property   Ifuniversal_tlb::Baudio Baudios = {read = get_Baudios, write = set_Baudios};
  __property   Ifuniversal_tlb::ModeloPrn Modelo = {read = get_Modelo, write = set_Modelo};
  __property   double          TotalDocFiscales = {read = get_TotalDocFiscales};
  __property   OLE_CANCELBOOL  CbteEsFiscal = {read = get_CbteEsFiscal};
  __property   OLE_CANCELBOOL  ErroresEnExcepciones = {read = get_ErroresEnExcepciones, write = set_ErroresEnExcepciones};
  __property   long            Copias = {read = get_Copias, write = set_Copias};
  __property   OLE_CANCELBOOL  Depurar = {read = get_Depurar, write = set_Depurar};
  __property   Ifuniversal_tlb::CierreZTotales* CierreZTotales = {read = get_CierreZTotales};
  __property   OLE_CANCELBOOL  PrecioBase = {read = get_PrecioBase, write = set_PrecioBase};
};
typedef IDriverDispT<IDriver> IDriverDisp;

// *********************************************************************//
// SmartIntf: TCOMIObtenerDatosDeInicializacionRespuesta
// Interface: IObtenerDatosDeInicializacionRespuesta
// *********************************************************************//
template <class T /* IObtenerDatosDeInicializacionRespuesta */ >
class TCOMIObtenerDatosDeInicializacionRespuestaT : public TComInterface<IObtenerDatosDeInicializacionRespuesta>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIObtenerDatosDeInicializacionRespuestaT() {}
  TCOMIObtenerDatosDeInicializacionRespuestaT(IObtenerDatosDeInicializacionRespuesta *intf, bool addRef = false) : TComInterface<IObtenerDatosDeInicializacionRespuesta>(intf, addRef) {}
  TCOMIObtenerDatosDeInicializacionRespuestaT(const TCOMIObtenerDatosDeInicializacionRespuestaT& src) : TComInterface<IObtenerDatosDeInicializacionRespuesta>(src) {}
  TCOMIObtenerDatosDeInicializacionRespuestaT& operator=(const TCOMIObtenerDatosDeInicializacionRespuestaT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_NroCUIT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroCUIT(void);
  HRESULT         __fastcall get_RazonSocial(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RazonSocial(void);
  HRESULT         __fastcall get_NroSerie(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroSerie(void);
  HRESULT         __fastcall get_FechaInicializacion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FechaInicializacion(void);
  HRESULT         __fastcall get_NroPOS(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroPOS(void);
  HRESULT         __fastcall get_FechaIniActividades(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FechaIniActividades(void);
  HRESULT         __fastcall get_CodIngBrutos(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CodIngBrutos(void);
  HRESULT         __fastcall get_RespIVA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RespIVA(void);
  HRESULT         __fastcall get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Resultado(void);

  __property   BSTR            NroCUIT = {read = get_NroCUIT};
  __property   BSTR            RazonSocial = {read = get_RazonSocial};
  __property   BSTR            NroSerie = {read = get_NroSerie};
  __property   BSTR            FechaInicializacion = {read = get_FechaInicializacion};
  __property   BSTR            NroPOS = {read = get_NroPOS};
  __property   BSTR            FechaIniActividades = {read = get_FechaIniActividades};
  __property   BSTR            CodIngBrutos = {read = get_CodIngBrutos};
  __property   BSTR            RespIVA = {read = get_RespIVA};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};
};
typedef TCOMIObtenerDatosDeInicializacionRespuestaT<IObtenerDatosDeInicializacionRespuesta> TCOMIObtenerDatosDeInicializacionRespuesta;

// *********************************************************************//
// DispIntf:  IObtenerDatosDeInicializacionRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44C8E088-C222-4FC1-94ED-9395F5FE32C2}
// *********************************************************************//
template<class T>
class IObtenerDatosDeInicializacionRespuestaDispT : public TAutoDriver<IObtenerDatosDeInicializacionRespuesta>
{
public:
  IObtenerDatosDeInicializacionRespuestaDispT(){}

  IObtenerDatosDeInicializacionRespuestaDispT(IObtenerDatosDeInicializacionRespuesta *pintf)
  {
    TAutoDriver<IObtenerDatosDeInicializacionRespuesta>::Bind(pintf, false);
  }

  IObtenerDatosDeInicializacionRespuestaDispT(IObtenerDatosDeInicializacionRespuestaPtr pintf)
  {
    TAutoDriver<IObtenerDatosDeInicializacionRespuesta>::Bind(pintf, true);
  }

  IObtenerDatosDeInicializacionRespuestaDispT& operator=(IObtenerDatosDeInicializacionRespuesta *pintf)
  {
    TAutoDriver<IObtenerDatosDeInicializacionRespuesta>::Bind(pintf, false);
    return *this;
  }

  IObtenerDatosDeInicializacionRespuestaDispT& operator=(IObtenerDatosDeInicializacionRespuestaPtr pintf)
  {
    TAutoDriver<IObtenerDatosDeInicializacionRespuesta>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ObtenerDatosDeInicializacionRespuesta));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ObtenerDatosDeInicializacionRespuesta);
  }

  HRESULT         __fastcall get_NroCUIT(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroCUIT(void);
  HRESULT         __fastcall get_RazonSocial(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RazonSocial(void);
  HRESULT         __fastcall get_NroSerie(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroSerie(void);
  HRESULT         __fastcall get_FechaInicializacion(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FechaInicializacion(void);
  HRESULT         __fastcall get_NroPOS(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_NroPOS(void);
  HRESULT         __fastcall get_FechaIniActividades(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_FechaIniActividades(void);
  HRESULT         __fastcall get_CodIngBrutos(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_CodIngBrutos(void);
  HRESULT         __fastcall get_RespIVA(BSTR* Value/*[out,retval]*/);
  BSTR            __fastcall get_RespIVA(void);
  HRESULT         __fastcall get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Resultado(void);

  __property   BSTR            NroCUIT = {read = get_NroCUIT};
  __property   BSTR            RazonSocial = {read = get_RazonSocial};
  __property   BSTR            NroSerie = {read = get_NroSerie};
  __property   BSTR            FechaInicializacion = {read = get_FechaInicializacion};
  __property   BSTR            NroPOS = {read = get_NroPOS};
  __property   BSTR            FechaIniActividades = {read = get_FechaIniActividades};
  __property   BSTR            CodIngBrutos = {read = get_CodIngBrutos};
  __property   BSTR            RespIVA = {read = get_RespIVA};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};
};
typedef IObtenerDatosDeInicializacionRespuestaDispT<IObtenerDatosDeInicializacionRespuesta> IObtenerDatosDeInicializacionRespuestaDisp;

// *********************************************************************//
// SmartIntf: TCOMISubtotalRespuesta
// Interface: ISubtotalRespuesta
// *********************************************************************//
template <class T /* ISubtotalRespuesta */ >
class TCOMISubtotalRespuestaT : public TComInterface<ISubtotalRespuesta>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMISubtotalRespuestaT() {}
  TCOMISubtotalRespuestaT(ISubtotalRespuesta *intf, bool addRef = false) : TComInterface<ISubtotalRespuesta>(intf, addRef) {}
  TCOMISubtotalRespuestaT(const TCOMISubtotalRespuestaT& src) : TComInterface<ISubtotalRespuesta>(src) {}
  TCOMISubtotalRespuestaT& operator=(const TCOMISubtotalRespuestaT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CantidadItemsVendidos(double* Value/*[out,retval]*/);
  double          __fastcall get_CantidadItemsVendidos(void);
  HRESULT         __fastcall get_MontoVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoVentas(void);
  HRESULT         __fastcall get_MontoIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoIVA(void);
  HRESULT         __fastcall get_MontoPagado(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoPagado(void);
  HRESULT         __fastcall get_MontoIVANoInscripto(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoIVANoInscripto(void);
  HRESULT         __fastcall get_MontoImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoImpuestosInternos(void);
  HRESULT         __fastcall get_MontoNeto(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoNeto(void);
  HRESULT         __fastcall get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Resultado(void);

  __property   double          CantidadItemsVendidos = {read = get_CantidadItemsVendidos};
  __property   double          MontoVentas = {read = get_MontoVentas};
  __property   double          MontoIVA = {read = get_MontoIVA};
  __property   double          MontoPagado = {read = get_MontoPagado};
  __property   double          MontoIVANoInscripto = {read = get_MontoIVANoInscripto};
  __property   double          MontoImpuestosInternos = {read = get_MontoImpuestosInternos};
  __property   double          MontoNeto = {read = get_MontoNeto};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};
};
typedef TCOMISubtotalRespuestaT<ISubtotalRespuesta> TCOMISubtotalRespuesta;

// *********************************************************************//
// DispIntf:  ISubtotalRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {09BDCB7C-4945-4231-AB0C-628CF69E8561}
// *********************************************************************//
template<class T>
class ISubtotalRespuestaDispT : public TAutoDriver<ISubtotalRespuesta>
{
public:
  ISubtotalRespuestaDispT(){}

  ISubtotalRespuestaDispT(ISubtotalRespuesta *pintf)
  {
    TAutoDriver<ISubtotalRespuesta>::Bind(pintf, false);
  }

  ISubtotalRespuestaDispT(ISubtotalRespuestaPtr pintf)
  {
    TAutoDriver<ISubtotalRespuesta>::Bind(pintf, true);
  }

  ISubtotalRespuestaDispT& operator=(ISubtotalRespuesta *pintf)
  {
    TAutoDriver<ISubtotalRespuesta>::Bind(pintf, false);
    return *this;
  }

  ISubtotalRespuestaDispT& operator=(ISubtotalRespuestaPtr pintf)
  {
    TAutoDriver<ISubtotalRespuesta>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_SubtotalRespuesta));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_SubtotalRespuesta);
  }

  HRESULT         __fastcall get_CantidadItemsVendidos(double* Value/*[out,retval]*/);
  double          __fastcall get_CantidadItemsVendidos(void);
  HRESULT         __fastcall get_MontoVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoVentas(void);
  HRESULT         __fastcall get_MontoIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoIVA(void);
  HRESULT         __fastcall get_MontoPagado(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoPagado(void);
  HRESULT         __fastcall get_MontoIVANoInscripto(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoIVANoInscripto(void);
  HRESULT         __fastcall get_MontoImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoImpuestosInternos(void);
  HRESULT         __fastcall get_MontoNeto(double* Value/*[out,retval]*/);
  double          __fastcall get_MontoNeto(void);
  HRESULT         __fastcall get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/);
  OLE_CANCELBOOL  __fastcall get_Resultado(void);

  __property   double          CantidadItemsVendidos = {read = get_CantidadItemsVendidos};
  __property   double          MontoVentas = {read = get_MontoVentas};
  __property   double          MontoIVA = {read = get_MontoIVA};
  __property   double          MontoPagado = {read = get_MontoPagado};
  __property   double          MontoIVANoInscripto = {read = get_MontoIVANoInscripto};
  __property   double          MontoImpuestosInternos = {read = get_MontoImpuestosInternos};
  __property   double          MontoNeto = {read = get_MontoNeto};
  __property   OLE_CANCELBOOL  Resultado = {read = get_Resultado};
};
typedef ISubtotalRespuestaDispT<ISubtotalRespuesta> ISubtotalRespuestaDisp;

// *********************************************************************//
// SmartIntf: TCOMICierreZTotales
// Interface: ICierreZTotales
// *********************************************************************//
template <class T /* ICierreZTotales */ >
class TCOMICierreZTotalesT : public TComInterface<ICierreZTotales>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMICierreZTotalesT() {}
  TCOMICierreZTotalesT(ICierreZTotales *intf, bool addRef = false) : TComInterface<ICierreZTotales>(intf, addRef) {}
  TCOMICierreZTotalesT(const TCOMICierreZTotalesT& src) : TComInterface<ICierreZTotales>(src) {}
  TCOMICierreZTotalesT& operator=(const TCOMICierreZTotalesT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_FNDTotalVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalVentas(void);
  HRESULT         __fastcall get_FNDTotalIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalIVA(void);
  HRESULT         __fastcall get_FNDTotalImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalImpuestosInternos(void);
  HRESULT         __fastcall get_FNDTotalOtrosTributos(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalOtrosTributos(void);
  HRESULT         __fastcall get_NCTotalVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalVentas(void);
  HRESULT         __fastcall get_NCTotalIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalIVA(void);
  HRESULT         __fastcall get_NCTotalImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalImpuestosInternos(void);
  HRESULT         __fastcall get_NCTotalOtrosTributos(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalOtrosTributos(void);
  HRESULT         __fastcall get_NroCierre(long* Value/*[out,retval]*/);
  long            __fastcall get_NroCierre(void);

  __property   double          FNDTotalVentas = {read = get_FNDTotalVentas};
  __property   double          FNDTotalIVA = {read = get_FNDTotalIVA};
  __property   double          FNDTotalImpuestosInternos = {read = get_FNDTotalImpuestosInternos};
  __property   double          FNDTotalOtrosTributos = {read = get_FNDTotalOtrosTributos};
  __property   double          NCTotalVentas = {read = get_NCTotalVentas};
  __property   double          NCTotalIVA = {read = get_NCTotalIVA};
  __property   double          NCTotalImpuestosInternos = {read = get_NCTotalImpuestosInternos};
  __property   double          NCTotalOtrosTributos = {read = get_NCTotalOtrosTributos};
  __property   long            NroCierre = {read = get_NroCierre};
};
typedef TCOMICierreZTotalesT<ICierreZTotales> TCOMICierreZTotales;

// *********************************************************************//
// DispIntf:  ICierreZTotales
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7973DAB-A411-454D-927E-517037721A21}
// *********************************************************************//
template<class T>
class ICierreZTotalesDispT : public TAutoDriver<ICierreZTotales>
{
public:
  ICierreZTotalesDispT(){}

  ICierreZTotalesDispT(ICierreZTotales *pintf)
  {
    TAutoDriver<ICierreZTotales>::Bind(pintf, false);
  }

  ICierreZTotalesDispT(ICierreZTotalesPtr pintf)
  {
    TAutoDriver<ICierreZTotales>::Bind(pintf, true);
  }

  ICierreZTotalesDispT& operator=(ICierreZTotales *pintf)
  {
    TAutoDriver<ICierreZTotales>::Bind(pintf, false);
    return *this;
  }

  ICierreZTotalesDispT& operator=(ICierreZTotalesPtr pintf)
  {
    TAutoDriver<ICierreZTotales>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_CierreZTotales));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_CierreZTotales);
  }

  HRESULT         __fastcall get_FNDTotalVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalVentas(void);
  HRESULT         __fastcall get_FNDTotalIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalIVA(void);
  HRESULT         __fastcall get_FNDTotalImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalImpuestosInternos(void);
  HRESULT         __fastcall get_FNDTotalOtrosTributos(double* Value/*[out,retval]*/);
  double          __fastcall get_FNDTotalOtrosTributos(void);
  HRESULT         __fastcall get_NCTotalVentas(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalVentas(void);
  HRESULT         __fastcall get_NCTotalIVA(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalIVA(void);
  HRESULT         __fastcall get_NCTotalImpuestosInternos(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalImpuestosInternos(void);
  HRESULT         __fastcall get_NCTotalOtrosTributos(double* Value/*[out,retval]*/);
  double          __fastcall get_NCTotalOtrosTributos(void);
  HRESULT         __fastcall get_NroCierre(long* Value/*[out,retval]*/);
  long            __fastcall get_NroCierre(void);

  __property   double          FNDTotalVentas = {read = get_FNDTotalVentas};
  __property   double          FNDTotalIVA = {read = get_FNDTotalIVA};
  __property   double          FNDTotalImpuestosInternos = {read = get_FNDTotalImpuestosInternos};
  __property   double          FNDTotalOtrosTributos = {read = get_FNDTotalOtrosTributos};
  __property   double          NCTotalVentas = {read = get_NCTotalVentas};
  __property   double          NCTotalIVA = {read = get_NCTotalIVA};
  __property   double          NCTotalImpuestosInternos = {read = get_NCTotalImpuestosInternos};
  __property   double          NCTotalOtrosTributos = {read = get_NCTotalOtrosTributos};
  __property   long            NroCierre = {read = get_NroCierre};
};
typedef ICierreZTotalesDispT<ICierreZTotales> ICierreZTotalesDisp;

// *********************************************************************//
// SmartIntf: TCOMIConsultarCapacidadZetasRespuesta
// Interface: IConsultarCapacidadZetasRespuesta
// *********************************************************************//
template <class T /* IConsultarCapacidadZetasRespuesta */ >
class TCOMIConsultarCapacidadZetasRespuestaT : public TComInterface<IConsultarCapacidadZetasRespuesta>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIConsultarCapacidadZetasRespuestaT() {}
  TCOMIConsultarCapacidadZetasRespuestaT(IConsultarCapacidadZetasRespuesta *intf, bool addRef = false) : TComInterface<IConsultarCapacidadZetasRespuesta>(intf, addRef) {}
  TCOMIConsultarCapacidadZetasRespuestaT(const TCOMIConsultarCapacidadZetasRespuestaT& src) : TComInterface<IConsultarCapacidadZetasRespuesta>(src) {}
  TCOMIConsultarCapacidadZetasRespuestaT& operator=(const TCOMIConsultarCapacidadZetasRespuestaT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_CantidadDeZetasRemanente(long* Value/*[out,retval]*/);
  long            __fastcall get_CantidadDeZetasRemanente(void);
  HRESULT         __fastcall get_UltimaZeta(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZeta(void);
  HRESULT         __fastcall get_UltimaZetaBajada(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZetaBajada(void);
  HRESULT         __fastcall get_UltimaZetaBorrable(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZetaBorrable(void);

  __property   long            CantidadDeZetasRemanente = {read = get_CantidadDeZetasRemanente};
  __property   long            UltimaZeta = {read = get_UltimaZeta};
  __property   long            UltimaZetaBajada = {read = get_UltimaZetaBajada};
  __property   long            UltimaZetaBorrable = {read = get_UltimaZetaBorrable};
};
typedef TCOMIConsultarCapacidadZetasRespuestaT<IConsultarCapacidadZetasRespuesta> TCOMIConsultarCapacidadZetasRespuesta;

// *********************************************************************//
// DispIntf:  IConsultarCapacidadZetasRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D33F62C-0EA9-44D4-8971-2333F441D7EE}
// *********************************************************************//
template<class T>
class IConsultarCapacidadZetasRespuestaDispT : public TAutoDriver<IConsultarCapacidadZetasRespuesta>
{
public:
  IConsultarCapacidadZetasRespuestaDispT(){}

  IConsultarCapacidadZetasRespuestaDispT(IConsultarCapacidadZetasRespuesta *pintf)
  {
    TAutoDriver<IConsultarCapacidadZetasRespuesta>::Bind(pintf, false);
  }

  IConsultarCapacidadZetasRespuestaDispT(IConsultarCapacidadZetasRespuestaPtr pintf)
  {
    TAutoDriver<IConsultarCapacidadZetasRespuesta>::Bind(pintf, true);
  }

  IConsultarCapacidadZetasRespuestaDispT& operator=(IConsultarCapacidadZetasRespuesta *pintf)
  {
    TAutoDriver<IConsultarCapacidadZetasRespuesta>::Bind(pintf, false);
    return *this;
  }

  IConsultarCapacidadZetasRespuestaDispT& operator=(IConsultarCapacidadZetasRespuestaPtr pintf)
  {
    TAutoDriver<IConsultarCapacidadZetasRespuesta>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ConsultarCapacidadZetasRespuesta));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ConsultarCapacidadZetasRespuesta);
  }

  HRESULT         __fastcall get_CantidadDeZetasRemanente(long* Value/*[out,retval]*/);
  long            __fastcall get_CantidadDeZetasRemanente(void);
  HRESULT         __fastcall get_UltimaZeta(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZeta(void);
  HRESULT         __fastcall get_UltimaZetaBajada(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZetaBajada(void);
  HRESULT         __fastcall get_UltimaZetaBorrable(long* Value/*[out,retval]*/);
  long            __fastcall get_UltimaZetaBorrable(void);

  __property   long            CantidadDeZetasRemanente = {read = get_CantidadDeZetasRemanente};
  __property   long            UltimaZeta = {read = get_UltimaZeta};
  __property   long            UltimaZetaBajada = {read = get_UltimaZetaBajada};
  __property   long            UltimaZetaBorrable = {read = get_UltimaZetaBorrable};
};
typedef IConsultarCapacidadZetasRespuestaDispT<IConsultarCapacidadZetasRespuesta> IConsultarCapacidadZetasRespuestaDisp;

// *********************************************************************//
// SmartIntf: TCOMIDriver
// Interface: IDriver
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Error(Ifuniversal_tlb::ErrorNro* Value/*[out,retval]*/)
{
  return (*this)->get_Error(Value);
}

template <class T> Ifuniversal_tlb::ErrorNro __fastcall
TCOMIDriverT<T>::get_Error(void)
{
  Ifuniversal_tlb::ErrorNro Value;
  OLECHECK(this->get_Error((Ifuniversal_tlb::ErrorNro*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_ErrorDesc(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_ErrorDesc(Value);
}

template <class T> BSTR __fastcall
TCOMIDriverT<T>::get_ErrorDesc(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_ErrorDesc((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Puerto(long* Value/*[out,retval]*/)
{
  return (*this)->get_Puerto(Value);
}

template <class T> long __fastcall
TCOMIDriverT<T>::get_Puerto(void)
{
  long Value;
  OLECHECK(this->get_Puerto((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_Puerto(long Value/*[in]*/)
{
  return (*this)->set_Puerto(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Baudios(Ifuniversal_tlb::Baudio* Value/*[out,retval]*/)
{
  return (*this)->get_Baudios(Value);
}

template <class T> Ifuniversal_tlb::Baudio __fastcall
TCOMIDriverT<T>::get_Baudios(void)
{
  Ifuniversal_tlb::Baudio Value;
  OLECHECK(this->get_Baudios((Ifuniversal_tlb::Baudio*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_Baudios(Ifuniversal_tlb::Baudio Value/*[in]*/)
{
  return (*this)->set_Baudios(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Modelo(Ifuniversal_tlb::ModeloPrn* Value/*[out,retval]*/)
{
  return (*this)->get_Modelo(Value);
}

template <class T> Ifuniversal_tlb::ModeloPrn __fastcall
TCOMIDriverT<T>::get_Modelo(void)
{
  Ifuniversal_tlb::ModeloPrn Value;
  OLECHECK(this->get_Modelo((Ifuniversal_tlb::ModeloPrn*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_Modelo(Ifuniversal_tlb::ModeloPrn Value/*[in]*/)
{
  return (*this)->set_Modelo(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/, 
                                  OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->AbrirComprobante(aTipoDeComprobante, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->AbrirComprobante(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                              double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                              double aImpuestosInternos/*[in]*/, 
                              OLE_CANCELBOOL* aResultado/*[out,retval]*/)
{
  return (*this)->ImprimirItem(aDescripcion, aCantidad, aPrecio, aIVA, aImpuestosInternos, 
                               aResultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                              double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                              double aImpuestosInternos/*[in]*/)
{
  OLE_CANCELBOOL aResultado;
  OLECHECK(this->ImprimirItem(, (OLE_CANCELBOOL*)&aResultado));
  return aResultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                double Precio/*[in]*/, double IVA/*[in]*/, 
                                double ImpuestosInternos/*[in]*/, 
                                Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                long g2UnidadReferencia/*[in]*/, BSTR g2CodigoProducto/*[in]*/, 
                                BSTR g2CodigoInterno/*[in]*/, 
                                Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirItem2g(Descripcion, Cantidad, Precio, IVA, ImpuestosInternos, 
                                 g2CondicionIVA, g2TipoImpuestoInterno, g2UnidadReferencia, 
                                 g2CodigoProducto, g2CodigoInterno, g2UnidadMedida, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                double Precio/*[in]*/, double IVA/*[in]*/, 
                                double ImpuestosInternos/*[in]*/, 
                                Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                long g2UnidadReferencia/*[in]*/, BSTR g2CodigoProducto/*[in]*/, 
                                BSTR g2CodigoInterno/*[in]*/, 
                                Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirItem2g(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirDescuentoGeneral(aDescripcion, aMonto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirDescuentoGeneral(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                              OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirPago(aDescripcion, aMonto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirPago(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                BSTR g2DescripcionAdicional/*[in]*/, 
                                Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                BSTR g2Referencia/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirPago2g(Descripcion, Monto, g2DescripcionAdicional, g2CodigoFormaPago, 
                                 g2Cuotas, g2Cupones, g2Referencia, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                BSTR g2DescripcionAdicional/*[in]*/, 
                                Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                BSTR g2Referencia/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirPago2g(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CerrarComprobante(void)
{
  return (*this)->CerrarComprobante();
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::DatosCliente(BSTR aNombre/*[in]*/, 
                              Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                              BSTR aDocumento/*[in]*/, 
                              Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                              BSTR aDireccion/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->DatosCliente(aNombre, aTipoDeDocumento, aDocumento, aResponsIVA, aDireccion, 
                               Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::DatosCliente(BSTR aNombre/*[in]*/, 
                              Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                              BSTR aDocumento/*[in]*/, 
                              Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                              BSTR aDireccion/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->DatosCliente(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CancelarComprobante(void)
{
  return (*this)->CancelarComprobante();
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::Inicializar(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->Inicializar(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::Inicializar(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->Inicializar((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_TotalDocFiscales(double* Value/*[out,retval]*/)
{
  return (*this)->get_TotalDocFiscales(Value);
}

template <class T> double __fastcall
TCOMIDriverT<T>::get_TotalDocFiscales(void)
{
  double Value;
  OLECHECK(this->get_TotalDocFiscales((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CierreX(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->CierreX(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::CierreX(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->CierreX((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CierreZ(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->CierreZ(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::CierreZ(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->CierreZ((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirTextoFiscal(BSTR aTexto/*[in]*/, OLE_CANCELBOOL* aResultado/*[out,retval]*/)
{
  return (*this)->ImprimirTextoFiscal(aTexto, aResultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirTextoFiscal(BSTR aTexto/*[in]*/)
{
  OLE_CANCELBOOL aResultado;
  OLECHECK(this->ImprimirTextoFiscal(, (OLE_CANCELBOOL*)&aResultado));
  return aResultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->InformarPercepcionGlobal(aDescripcion, aMonto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->InformarPercepcionGlobal(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                       double aAlicuota/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->InformarPercepcionIVA(aDescripcion, aMonto, aAlicuota, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                       double aAlicuota/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->InformarPercepcionIVA(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_CbteEsFiscal(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_CbteEsFiscal(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::get_CbteEsFiscal(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_CbteEsFiscal((OLE_CANCELBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::DocumentoDeReferencia(BSTR aDocumento/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->DocumentoDeReferencia(aDocumento, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::DocumentoDeReferencia(BSTR aDocumento/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->DocumentoDeReferencia(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/, 
                                   long* Resultado/*[out,retval]*/)
{
  return (*this)->UltimoComprobante(aTipoComprobante, Resultado);
}

template <class T> long __fastcall
TCOMIDriverT<T>::UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/)
{
  long Resultado;
  OLECHECK(this->UltimoComprobante(, (long*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::UltimoComprobanteCancelado(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->UltimoComprobanteCancelado(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::UltimoComprobanteCancelado(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->UltimoComprobanteCancelado((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_ErroresEnExcepciones(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_ErroresEnExcepciones(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::get_ErroresEnExcepciones(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_ErroresEnExcepciones((OLE_CANCELBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_ErroresEnExcepciones(OLE_CANCELBOOL Value/*[in]*/)
{
  return (*this)->set_ErroresEnExcepciones(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::Finalizar(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->Finalizar(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::Finalizar(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->Finalizar((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                               BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                               BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                               BSTR FechaVencimientoCarnet/*[in]*/, BSTR DomicilioVend1/*[in]*/, 
                               BSTR DomicilioVend2/*[in]*/, BSTR NombreEstablecimiento/*[in]*/, 
                               BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, BSTR Nota2/*[in]*/, 
                               OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->DNFHFarmacias(ObraSocial, Coseguro1, Coseguro2, Coseguro3, NroAfiliado, 
                                NombreAfiliado, FechaVencimientoCarnet, DomicilioVend1, 
                                DomicilioVend2, NombreEstablecimiento, NroInterno, Nota1, Nota2, 
                                Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                               BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                               BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                               BSTR FechaVencimientoCarnet/*[in]*/, BSTR DomicilioVend1/*[in]*/, 
                               BSTR DomicilioVend2/*[in]*/, BSTR NombreEstablecimiento/*[in]*/, 
                               BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, BSTR Nota2/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->DNFHFarmacias(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CortarPapel(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->CortarPapel(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::CortarPapel(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->CortarPapel((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirTextoNoFiscal(BSTR texto/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirTextoNoFiscal(texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirTextoNoFiscal(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirTextoNoFiscal(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirDescuentoUltimoItem(Descripcion, Monto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, double Monto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirDescuentoUltimoItem(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                OLE_CANCELBOOL Detallado/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ReporteZFechas(FechaInicial, FechaFinal, Detallado, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                OLE_CANCELBOOL Detallado/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ReporteZFechas(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                 OLE_CANCELBOOL Detallado/*[in]*/, 
                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ReporteZNumeros(NroInicio, NroFin, Detallado, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                 OLE_CANCELBOOL Detallado/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ReporteZNumeros(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->EspecificarEncabezado(Linea, texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->EspecificarEncabezado(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->EspecificarPie(Linea, texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->EspecificarPie(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CerrarComprobanteNumero(long* Numero/*[out]*/, 
                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->CerrarComprobanteNumero(Numero, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::CerrarComprobanteNumero(long* Numero/*[out]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->CerrarComprobanteNumero(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Copias(long* Value/*[out,retval]*/)
{
  return (*this)->get_Copias(Value);
}

template <class T> long __fastcall
TCOMIDriverT<T>::get_Copias(void)
{
  long Value;
  OLECHECK(this->get_Copias((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_Copias(long Value/*[in]*/)
{
  return (*this)->set_Copias(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_Depurar(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Depurar(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::get_Depurar(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_Depurar((OLE_CANCELBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_Depurar(OLE_CANCELBOOL Value/*[in]*/)
{
  return (*this)->set_Depurar(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ObtenerFechaHora(BSTR* FechaHora/*[out,retval]*/)
{
  return (*this)->ObtenerFechaHora(FechaHora);
}

template <class T> BSTR __fastcall
TCOMIDriverT<T>::ObtenerFechaHora(void)
{
  BSTR FechaHora = 0;
  OLECHECK(this->ObtenerFechaHora((BSTR*)&FechaHora));
  return FechaHora;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::AbrirCajon(void)
{
  return (*this)->AbrirCajon();
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ObtenerDatosDeInicializacion(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta** Resultado/*[out,retval]*/)
{
  return (*this)->ObtenerDatosDeInicializacion(Resultado);
}

template <class T> Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* __fastcall
TCOMIDriverT<T>::ObtenerDatosDeInicializacion(void)
{
  Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* Resultado;
  OLECHECK(this->ObtenerDatosDeInicializacion((Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta**)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::Subtotal(Ifuniversal_tlb::ISubtotalRespuesta** Resultado/*[out,retval]*/)
{
  return (*this)->Subtotal(Resultado);
}

template <class T> Ifuniversal_tlb::ISubtotalRespuesta* __fastcall
TCOMIDriverT<T>::Subtotal(void)
{
  Ifuniversal_tlb::ISubtotalRespuesta* Resultado;
  OLECHECK(this->Subtotal((Ifuniversal_tlb::ISubtotalRespuesta**)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                       BSTR Descripcion/*[in]*/, double BaseImponible/*[in]*/, 
                                       double Importe/*[in]*/, double Alicuota/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirOtrosTributos(Codigo, Descripcion, BaseImponible, Importe, Alicuota, 
                                        Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                       BSTR Descripcion/*[in]*/, double BaseImponible/*[in]*/, 
                                       double Importe/*[in]*/, double Alicuota/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirOtrosTributos(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CargarLicencia(BSTR Licencia/*[in]*/)
{
  return (*this)->CargarLicencia(Licencia);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/, 
                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->Conectar(DireccionIP, Puerto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->Conectar(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                         BSTR Documento/*[in]*/, 
                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->DocumentoDeReferencia2g(TipoComprobante, Documento, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                         BSTR Documento/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->DocumentoDeReferencia2g(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_CierreZTotales(Ifuniversal_tlb::CierreZTotales** Value/*[out,retval]*/)
{
  return (*this)->get_CierreZTotales(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_CierreZTotales(Ifuniversal_tlb::CierreZTotalesPtr* Value/*[out,retval]*/)
{
  return (*this)->get_CierreZTotales(CierreZTotales**)Value);
}

template <class T> Ifuniversal_tlb::CierreZTotalesPtr __fastcall
TCOMIDriverT<T>::get_CierreZTotales(void)
{
  Ifuniversal_tlb::CierreZTotales* Value;
  OLECHECK(this->get_CierreZTotales((Ifuniversal_tlb::CierreZTotales**)&Value));
  return (Ifuniversal_tlb::CierreZTotalesPtr)Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::EspecificarFechaHora(BSTR FechaHora/*[in]*/, 
                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->EspecificarFechaHora(FechaHora, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::EspecificarFechaHora(BSTR FechaHora/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->EspecificarFechaHora(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::get_PrecioBase(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_PrecioBase(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::get_PrecioBase(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_PrecioBase((OLE_CANCELBOOL*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::set_PrecioBase(OLE_CANCELBOOL Value/*[in]*/)
{
  return (*this)->set_PrecioBase(Value);
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                     BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                     Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                     BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                     BSTR Dominio2/*[in]*/, 
                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->CargarTransportista(RazonSocial, Cuit, Domicilio, NombreChofer, TipoDocumento, 
                                      NumeroDocumento, Dominio1, Dominio2, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                     BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                     Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                     BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                     BSTR Dominio2/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->CargarTransportista(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ImprimirConceptoRecibo(BSTR texto/*[in]*/, 
                                        OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ImprimirConceptoRecibo(texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ImprimirConceptoRecibo(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ImprimirConceptoRecibo(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::EspecificarIngresosBrutos(BSTR texto/*[in]*/, 
                                           OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->EspecificarIngresosBrutos(texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::EspecificarIngresosBrutos(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->EspecificarIngresosBrutos(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::EspecificarInicioActividades(BSTR texto/*[in]*/, 
                                              OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->EspecificarInicioActividades(texto, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::EspecificarInicioActividades(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->EspecificarInicioActividades(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                       BSTR RangoFinal/*[in]*/, 
                                                       BSTR NombreArchivo/*[in]*/, 
                                                       Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/, 
                                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ObtenerPrimerBloqueReporteElectronico(RangoInicial, RangoFinal, NombreArchivo, 
                                                        TipoReporte, Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                       BSTR RangoFinal/*[in]*/, 
                                                       BSTR NombreArchivo/*[in]*/, 
                                                       Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ObtenerPrimerBloqueReporteElectronico(, (OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ObtenerSiguienteBloqueReporteElectronico(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ObtenerSiguienteBloqueReporteElectronico(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ObtenerSiguienteBloqueReporteElectronico(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ObtenerSiguienteBloqueReporteElectronico((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

template <class T> HRESULT __fastcall
TCOMIDriverT<T>::ConsultarCapacidadZetas(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  return (*this)->ConsultarCapacidadZetas(Resultado);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIDriverT<T>::ConsultarCapacidadZetas(void)
{
  OLE_CANCELBOOL Resultado;
  OLECHECK(this->ConsultarCapacidadZetas((OLE_CANCELBOOL*)&Resultado));
  return Resultado;
}

// *********************************************************************//
// DispIntf:  IDriver
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {00AA0FC3-6850-4F18-BB90-9FE15E32ACBD}
// *********************************************************************//
template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Error(Ifuniversal_tlb::ErrorNro* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Error"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ifuniversal_tlb::ErrorNro __fastcall
IDriverDispT<T>::get_Error(void)
{
  Ifuniversal_tlb::ErrorNro Value;
  this->get_Error((Ifuniversal_tlb::ErrorNro*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_ErrorDesc(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErrorDesc"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IDriverDispT<T>::get_ErrorDesc(void)
{
  BSTR Value;
  this->get_ErrorDesc((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Puerto(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Puerto"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDriverDispT<T>::get_Puerto(void)
{
  long Value;
  this->get_Puerto((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_Puerto(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Puerto"), DISPID(201));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Baudios(Ifuniversal_tlb::Baudio* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Baudios"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ifuniversal_tlb::Baudio __fastcall
IDriverDispT<T>::get_Baudios(void)
{
  Ifuniversal_tlb::Baudio Value;
  this->get_Baudios((Ifuniversal_tlb::Baudio*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_Baudios(Ifuniversal_tlb::Baudio Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Baudios"), DISPID(205));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Modelo(Ifuniversal_tlb::ModeloPrn* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modelo"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((int*)Value /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ifuniversal_tlb::ModeloPrn __fastcall
IDriverDispT<T>::get_Modelo(void)
{
  Ifuniversal_tlb::ModeloPrn Value;
  this->get_Modelo((Ifuniversal_tlb::ModeloPrn*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_Modelo(Ifuniversal_tlb::ModeloPrn Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Modelo"), DISPID(206));
  TAutoArgs<1> _args;
  _args[1] = (int)Value /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/, 
                                  OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbrirComprobante"), DISPID(202));
  TAutoArgs<1> _args;
  _args[1] = (int)aTipoDeComprobante /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::AbrirComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoDeComprobante/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->AbrirComprobante(aTipoDeComprobante, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                              double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                              double aImpuestosInternos/*[in]*/, 
                              OLE_CANCELBOOL* aResultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirItem"), DISPID(207));
  TAutoArgs<5> _args;
  _args[1] = aDescripcion /*[VT_BSTR:0]*/;
  _args[2] = aCantidad /*[VT_R8:0]*/;
  _args[3] = aPrecio /*[VT_R8:0]*/;
  _args[4] = aIVA /*[VT_R8:0]*/;
  _args[5] = aImpuestosInternos /*[VT_R8:0]*/;
  return OutRetValSetterPtr(aResultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirItem(BSTR aDescripcion/*[in]*/, double aCantidad/*[in]*/, 
                              double aPrecio/*[in]*/, double aIVA/*[in]*/, 
                              double aImpuestosInternos/*[in]*/)
{
  OLE_CANCELBOOL aResultado;
  this->ImprimirItem(aDescripcion, aCantidad, aPrecio, aIVA, aImpuestosInternos, (OLE_CANCELBOOL*)&aResultado);
  return aResultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                double Precio/*[in]*/, double IVA/*[in]*/, 
                                double ImpuestosInternos/*[in]*/, 
                                Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                long g2UnidadReferencia/*[in]*/, BSTR g2CodigoProducto/*[in]*/, 
                                BSTR g2CodigoInterno/*[in]*/, 
                                Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirItem2g"), DISPID(242));
  TAutoArgs<11> _args;
  _args[1] = Descripcion /*[VT_BSTR:0]*/;
  _args[2] = Cantidad /*[VT_R8:0]*/;
  _args[3] = Precio /*[VT_R8:0]*/;
  _args[4] = IVA /*[VT_R8:0]*/;
  _args[5] = ImpuestosInternos /*[VT_R8:0]*/;
  _args[6] = (int)g2CondicionIVA /*[VT_USERDEFINED:0]*/;
  _args[7] = (int)g2TipoImpuestoInterno /*[VT_USERDEFINED:0]*/;
  _args[8] = g2UnidadReferencia /*[VT_I4:0]*/;
  _args[9] = g2CodigoProducto /*[VT_BSTR:0]*/;
  _args[10] = g2CodigoInterno /*[VT_BSTR:0]*/;
  _args[11] = (int)g2UnidadMedida /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirItem2g(BSTR Descripcion/*[in]*/, double Cantidad/*[in]*/, 
                                double Precio/*[in]*/, double IVA/*[in]*/, 
                                double ImpuestosInternos/*[in]*/, 
                                Ifuniversal_tlb::CondicionesIVA g2CondicionIVA/*[in]*/, 
                                Ifuniversal_tlb::TipoImpuestoInterno g2TipoImpuestoInterno/*[in]*/, 
                                long g2UnidadReferencia/*[in]*/, BSTR g2CodigoProducto/*[in]*/, 
                                BSTR g2CodigoInterno/*[in]*/, 
                                Ifuniversal_tlb::UnidadesMedida g2UnidadMedida/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirItem2g(Descripcion, Cantidad, Precio, IVA, ImpuestosInternos, g2CondicionIVA, 
                       g2TipoImpuestoInterno, g2UnidadReferencia, g2CodigoProducto, g2CodigoInterno, 
                       g2UnidadMedida, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirDescuentoGeneral"), DISPID(208));
  TAutoArgs<2> _args;
  _args[1] = aDescripcion /*[VT_BSTR:0]*/;
  _args[2] = aMonto /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirDescuentoGeneral(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirDescuentoGeneral(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                              OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirPago"), DISPID(209));
  TAutoArgs<2> _args;
  _args[1] = aDescripcion /*[VT_BSTR:0]*/;
  _args[2] = aMonto /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirPago(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirPago(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                BSTR g2DescripcionAdicional/*[in]*/, 
                                Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                BSTR g2Referencia/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirPago2g"), DISPID(243));
  TAutoArgs<7> _args;
  _args[1] = Descripcion /*[VT_BSTR:0]*/;
  _args[2] = Monto /*[VT_R8:0]*/;
  _args[3] = g2DescripcionAdicional /*[VT_BSTR:0]*/;
  _args[4] = (int)g2CodigoFormaPago /*[VT_USERDEFINED:0]*/;
  _args[5] = g2Cuotas /*[VT_I4:0]*/;
  _args[6] = g2Cupones /*[VT_BSTR:0]*/;
  _args[7] = g2Referencia /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirPago2g(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                BSTR g2DescripcionAdicional/*[in]*/, 
                                Ifuniversal_tlb::TiposPago g2CodigoFormaPago/*[in]*/, 
                                long g2Cuotas/*[in]*/, BSTR g2Cupones/*[in]*/, 
                                BSTR g2Referencia/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirPago2g(Descripcion, Monto, g2DescripcionAdicional, g2CodigoFormaPago, g2Cuotas, 
                       g2Cupones, g2Referencia, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CerrarComprobante()
{
  _TDispID _dispid(*this, OLETEXT("CerrarComprobante"), DISPID(210));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::DatosCliente(BSTR aNombre/*[in]*/, 
                              Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                              BSTR aDocumento/*[in]*/, 
                              Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                              BSTR aDireccion/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DatosCliente"), DISPID(211));
  TAutoArgs<5> _args;
  _args[1] = aNombre /*[VT_BSTR:0]*/;
  _args[2] = (int)aTipoDeDocumento /*[VT_USERDEFINED:0]*/;
  _args[3] = aDocumento /*[VT_BSTR:0]*/;
  _args[4] = (int)aResponsIVA /*[VT_USERDEFINED:0]*/;
  _args[5] = aDireccion /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::DatosCliente(BSTR aNombre/*[in]*/, 
                              Ifuniversal_tlb::TipoDeDocumento aTipoDeDocumento/*[in]*/, 
                              BSTR aDocumento/*[in]*/, 
                              Ifuniversal_tlb::ResponsabilidadIVA aResponsIVA/*[in]*/, 
                              BSTR aDireccion/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->DatosCliente(aNombre, aTipoDeDocumento, aDocumento, aResponsIVA, aDireccion, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CancelarComprobante()
{
  _TDispID _dispid(*this, OLETEXT("CancelarComprobante"), DISPID(212));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::Inicializar(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Inicializar"), DISPID(213));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::Inicializar(void)
{
  OLE_CANCELBOOL Resultado;
  this->Inicializar((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_TotalDocFiscales(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TotalDocFiscales"), DISPID(214));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IDriverDispT<T>::get_TotalDocFiscales(void)
{
  double Value;
  this->get_TotalDocFiscales((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CierreX(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CierreX"), DISPID(215));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::CierreX(void)
{
  OLE_CANCELBOOL Resultado;
  this->CierreX((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CierreZ(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CierreZ"), DISPID(216));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::CierreZ(void)
{
  OLE_CANCELBOOL Resultado;
  this->CierreZ((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirTextoFiscal(BSTR aTexto/*[in]*/, OLE_CANCELBOOL* aResultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirTextoFiscal"), DISPID(217));
  TAutoArgs<1> _args;
  _args[1] = aTexto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(aResultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirTextoFiscal(BSTR aTexto/*[in]*/)
{
  OLE_CANCELBOOL aResultado;
  this->ImprimirTextoFiscal(aTexto, (OLE_CANCELBOOL*)&aResultado);
  return aResultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InformarPercepcionGlobal"), DISPID(218));
  TAutoArgs<2> _args;
  _args[1] = aDescripcion /*[VT_BSTR:0]*/;
  _args[2] = aMonto /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::InformarPercepcionGlobal(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->InformarPercepcionGlobal(aDescripcion, aMonto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                       double aAlicuota/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InformarPercepcionIVA"), DISPID(219));
  TAutoArgs<3> _args;
  _args[1] = aDescripcion /*[VT_BSTR:0]*/;
  _args[2] = aMonto /*[VT_R8:0]*/;
  _args[3] = aAlicuota /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::InformarPercepcionIVA(BSTR aDescripcion/*[in]*/, double aMonto/*[in]*/, 
                                       double aAlicuota/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->InformarPercepcionIVA(aDescripcion, aMonto, aAlicuota, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_CbteEsFiscal(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CbteEsFiscal"), DISPID(220));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::get_CbteEsFiscal(void)
{
  OLE_CANCELBOOL Value;
  this->get_CbteEsFiscal((OLE_CANCELBOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::DocumentoDeReferencia(BSTR aDocumento/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocumentoDeReferencia"), DISPID(221));
  TAutoArgs<1> _args;
  _args[1] = aDocumento /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::DocumentoDeReferencia(BSTR aDocumento/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->DocumentoDeReferencia(aDocumento, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/, 
                                   long* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltimoComprobante"), DISPID(222));
  TAutoArgs<1> _args;
  _args[1] = (int)aTipoComprobante /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
IDriverDispT<T>::UltimoComprobante(Ifuniversal_tlb::TipoDeComprobante aTipoComprobante/*[in]*/)
{
  long Resultado;
  this->UltimoComprobante(aTipoComprobante, (long*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::UltimoComprobanteCancelado(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltimoComprobanteCancelado"), DISPID(223));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::UltimoComprobanteCancelado(void)
{
  OLE_CANCELBOOL Resultado;
  this->UltimoComprobanteCancelado((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_ErroresEnExcepciones(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErroresEnExcepciones"), DISPID(224));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::get_ErroresEnExcepciones(void)
{
  OLE_CANCELBOOL Value;
  this->get_ErroresEnExcepciones((OLE_CANCELBOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_ErroresEnExcepciones(OLE_CANCELBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ErroresEnExcepciones"), DISPID(224));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::Finalizar(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Finalizar"), DISPID(225));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::Finalizar(void)
{
  OLE_CANCELBOOL Resultado;
  this->Finalizar((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                               BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                               BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                               BSTR FechaVencimientoCarnet/*[in]*/, BSTR DomicilioVend1/*[in]*/, 
                               BSTR DomicilioVend2/*[in]*/, BSTR NombreEstablecimiento/*[in]*/, 
                               BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, BSTR Nota2/*[in]*/, 
                               OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DNFHFarmacias"), DISPID(226));
  TAutoArgs<13> _args;
  _args[1] = ObraSocial /*[VT_BSTR:0]*/;
  _args[2] = Coseguro1 /*[VT_BSTR:0]*/;
  _args[3] = Coseguro2 /*[VT_BSTR:0]*/;
  _args[4] = Coseguro3 /*[VT_BSTR:0]*/;
  _args[5] = NroAfiliado /*[VT_BSTR:0]*/;
  _args[6] = NombreAfiliado /*[VT_BSTR:0]*/;
  _args[7] = FechaVencimientoCarnet /*[VT_BSTR:0]*/;
  _args[8] = DomicilioVend1 /*[VT_BSTR:0]*/;
  _args[9] = DomicilioVend2 /*[VT_BSTR:0]*/;
  _args[10] = NombreEstablecimiento /*[VT_BSTR:0]*/;
  _args[11] = NroInterno /*[VT_BSTR:0]*/;
  _args[12] = Nota1 /*[VT_BSTR:0]*/;
  _args[13] = Nota2 /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::DNFHFarmacias(BSTR ObraSocial/*[in]*/, BSTR Coseguro1/*[in]*/, 
                               BSTR Coseguro2/*[in]*/, BSTR Coseguro3/*[in]*/, 
                               BSTR NroAfiliado/*[in]*/, BSTR NombreAfiliado/*[in]*/, 
                               BSTR FechaVencimientoCarnet/*[in]*/, BSTR DomicilioVend1/*[in]*/, 
                               BSTR DomicilioVend2/*[in]*/, BSTR NombreEstablecimiento/*[in]*/, 
                               BSTR NroInterno/*[in]*/, BSTR Nota1/*[in]*/, BSTR Nota2/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->DNFHFarmacias(ObraSocial, Coseguro1, Coseguro2, Coseguro3, NroAfiliado, NombreAfiliado, 
                      FechaVencimientoCarnet, DomicilioVend1, DomicilioVend2, NombreEstablecimiento, 
                      NroInterno, Nota1, Nota2, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CortarPapel(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CortarPapel"), DISPID(227));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::CortarPapel(void)
{
  OLE_CANCELBOOL Resultado;
  this->CortarPapel((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirTextoNoFiscal(BSTR texto/*[in]*/, OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirTextoNoFiscal"), DISPID(228));
  TAutoArgs<1> _args;
  _args[1] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirTextoNoFiscal(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirTextoNoFiscal(texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, double Monto/*[in]*/, 
                                             OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirDescuentoUltimoItem"), DISPID(229));
  TAutoArgs<2> _args;
  _args[1] = Descripcion /*[VT_BSTR:0]*/;
  _args[2] = Monto /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirDescuentoUltimoItem(BSTR Descripcion/*[in]*/, double Monto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirDescuentoUltimoItem(Descripcion, Monto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                OLE_CANCELBOOL Detallado/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReporteZFechas"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = FechaInicial /*[VT_BSTR:0]*/;
  _args[2] = FechaFinal /*[VT_BSTR:0]*/;
  _args[3] = Detallado /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ReporteZFechas(BSTR FechaInicial/*[in]*/, BSTR FechaFinal/*[in]*/, 
                                OLE_CANCELBOOL Detallado/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ReporteZFechas(FechaInicial, FechaFinal, Detallado, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                 OLE_CANCELBOOL Detallado/*[in]*/, 
                                 OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReporteZNumeros"), DISPID(231));
  TAutoArgs<3> _args;
  _args[1] = NroInicio /*[VT_I4:0]*/;
  _args[2] = NroFin /*[VT_I4:0]*/;
  _args[3] = Detallado /*[VT_BOOL:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ReporteZNumeros(long NroInicio/*[in]*/, long NroFin/*[in]*/, 
                                 OLE_CANCELBOOL Detallado/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ReporteZNumeros(NroInicio, NroFin, Detallado, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EspecificarEncabezado"), DISPID(232));
  TAutoArgs<2> _args;
  _args[1] = Linea /*[VT_I4:0]*/;
  _args[2] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::EspecificarEncabezado(long Linea/*[in]*/, BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->EspecificarEncabezado(Linea, texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/, 
                                OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EspecificarPie"), DISPID(233));
  TAutoArgs<2> _args;
  _args[1] = Linea /*[VT_I4:0]*/;
  _args[2] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::EspecificarPie(long Linea/*[in]*/, BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->EspecificarPie(Linea, texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CerrarComprobanteNumero(long* Numero/*[out]*/, 
                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CerrarComprobanteNumero"), DISPID(234));
  TAutoArgs<1> _args;
  _args[1] = Numero /*[VT_I4:1]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::CerrarComprobanteNumero(long* Numero/*[out]*/)
{
  OLE_CANCELBOOL Resultado;
  this->CerrarComprobanteNumero(Numero, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Copias(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copias"), DISPID(235));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IDriverDispT<T>::get_Copias(void)
{
  long Value;
  this->get_Copias((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_Copias(long Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Copias"), DISPID(235));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_Depurar(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depurar"), DISPID(236));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::get_Depurar(void)
{
  OLE_CANCELBOOL Value;
  this->get_Depurar((OLE_CANCELBOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_Depurar(OLE_CANCELBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Depurar"), DISPID(236));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ObtenerFechaHora(BSTR* FechaHora/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObtenerFechaHora"), DISPID(237));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(FechaHora /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
IDriverDispT<T>::ObtenerFechaHora(void)
{
  BSTR FechaHora;
  this->ObtenerFechaHora((BSTR*)&FechaHora);
  return FechaHora;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::AbrirCajon()
{
  _TDispID _dispid(*this, OLETEXT("AbrirCajon"), DISPID(238));
  return OleFunction(_dispid);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ObtenerDatosDeInicializacion(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta** Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObtenerDatosDeInicializacion"), DISPID(239));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta**)Resultado /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* __fastcall
IDriverDispT<T>::ObtenerDatosDeInicializacion(void)
{
  Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta* Resultado;
  this->ObtenerDatosDeInicializacion((Ifuniversal_tlb::IObtenerDatosDeInicializacionRespuesta**)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::Subtotal(Ifuniversal_tlb::ISubtotalRespuesta** Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Subtotal"), DISPID(240));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ifuniversal_tlb::ISubtotalRespuesta**)Resultado /*[VT_USERDEFINED:2]*/, _args, OleFunction(_dispid, _args));
}

template <class T> Ifuniversal_tlb::ISubtotalRespuesta* __fastcall
IDriverDispT<T>::Subtotal(void)
{
  Ifuniversal_tlb::ISubtotalRespuesta* Resultado;
  this->Subtotal((Ifuniversal_tlb::ISubtotalRespuesta**)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                       BSTR Descripcion/*[in]*/, double BaseImponible/*[in]*/, 
                                       double Importe/*[in]*/, double Alicuota/*[in]*/, 
                                       OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirOtrosTributos"), DISPID(241));
  TAutoArgs<5> _args;
  _args[1] = (int)Codigo /*[VT_USERDEFINED:0]*/;
  _args[2] = Descripcion /*[VT_BSTR:0]*/;
  _args[3] = BaseImponible /*[VT_R8:0]*/;
  _args[4] = Importe /*[VT_R8:0]*/;
  _args[5] = Alicuota /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirOtrosTributos(Ifuniversal_tlb::TiposTributos Codigo/*[in]*/, 
                                       BSTR Descripcion/*[in]*/, double BaseImponible/*[in]*/, 
                                       double Importe/*[in]*/, double Alicuota/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirOtrosTributos(Codigo, Descripcion, BaseImponible, Importe, Alicuota, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CargarLicencia(BSTR Licencia/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CargarLicencia"), DISPID(244));
  TAutoArgs<1> _args;
  _args[1] = Licencia /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/, 
                          OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Conectar"), DISPID(245));
  TAutoArgs<2> _args;
  _args[1] = DireccionIP /*[VT_BSTR:0]*/;
  _args[2] = Puerto /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::Conectar(BSTR DireccionIP/*[in]*/, long Puerto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->Conectar(DireccionIP, Puerto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/
                                         , BSTR Documento/*[in]*/, 
                                         OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DocumentoDeReferencia2g"), DISPID(246));
  TAutoArgs<2> _args;
  _args[1] = (int)TipoComprobante /*[VT_USERDEFINED:0]*/;
  _args[2] = Documento /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::DocumentoDeReferencia2g(Ifuniversal_tlb::TipoDeComprobante TipoComprobante/*[in]*/, 
                                         BSTR Documento/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->DocumentoDeReferencia2g(TipoComprobante, Documento, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_CierreZTotales(Ifuniversal_tlb::CierreZTotales** Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CierreZTotales"), DISPID(247));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr((LPDISPATCH*)(Ifuniversal_tlb::CierreZTotales**)Value /*[VT_USERDEFINED:2]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Ifuniversal_tlb::CierreZTotales* __fastcall
IDriverDispT<T>::get_CierreZTotales(void)
{
  Ifuniversal_tlb::CierreZTotales* Value;
  this->get_CierreZTotales((Ifuniversal_tlb::CierreZTotales**)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::EspecificarFechaHora(BSTR FechaHora/*[in]*/, 
                                      OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EspecificarFechaHora"), DISPID(248));
  TAutoArgs<1> _args;
  _args[1] = FechaHora /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::EspecificarFechaHora(BSTR FechaHora/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->EspecificarFechaHora(FechaHora, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::get_PrecioBase(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrecioBase"), DISPID(249));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::get_PrecioBase(void)
{
  OLE_CANCELBOOL Value;
  this->get_PrecioBase((OLE_CANCELBOOL*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::set_PrecioBase(OLE_CANCELBOOL Value/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PrecioBase"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                     BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                     Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                     BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                     BSTR Dominio2/*[in]*/, 
                                     OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CargarTransportista"), DISPID(250));
  TAutoArgs<8> _args;
  _args[1] = RazonSocial /*[VT_BSTR:0]*/;
  _args[2] = Cuit /*[VT_R8:0]*/;
  _args[3] = Domicilio /*[VT_BSTR:0]*/;
  _args[4] = NombreChofer /*[VT_BSTR:0]*/;
  _args[5] = (int)TipoDocumento /*[VT_USERDEFINED:0]*/;
  _args[6] = NumeroDocumento /*[VT_BSTR:0]*/;
  _args[7] = Dominio1 /*[VT_BSTR:0]*/;
  _args[8] = Dominio2 /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::CargarTransportista(BSTR RazonSocial/*[in]*/, double Cuit/*[in]*/, 
                                     BSTR Domicilio/*[in]*/, BSTR NombreChofer/*[in]*/, 
                                     Ifuniversal_tlb::TipoDeDocumento TipoDocumento/*[in]*/, 
                                     BSTR NumeroDocumento/*[in]*/, BSTR Dominio1/*[in]*/, 
                                     BSTR Dominio2/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->CargarTransportista(RazonSocial, Cuit, Domicilio, NombreChofer, TipoDocumento, 
                            NumeroDocumento, Dominio1, Dominio2, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ImprimirConceptoRecibo(BSTR texto/*[in]*/, 
                                        OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ImprimirConceptoRecibo"), DISPID(251));
  TAutoArgs<1> _args;
  _args[1] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ImprimirConceptoRecibo(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ImprimirConceptoRecibo(texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::EspecificarIngresosBrutos(BSTR texto/*[in]*/, 
                                           OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EspecificarIngresosBrutos"), DISPID(252));
  TAutoArgs<1> _args;
  _args[1] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::EspecificarIngresosBrutos(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->EspecificarIngresosBrutos(texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::EspecificarInicioActividades(BSTR texto/*[in]*/, 
                                              OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("EspecificarInicioActividades"), DISPID(253));
  TAutoArgs<1> _args;
  _args[1] = texto /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::EspecificarInicioActividades(BSTR texto/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->EspecificarInicioActividades(texto, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                       BSTR RangoFinal/*[in]*/, 
                                                       BSTR NombreArchivo/*[in]*/, 
                                                       Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/
                                                       , OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObtenerPrimerBloqueReporteElectronico"), DISPID(254));
  TAutoArgs<4> _args;
  _args[1] = RangoInicial /*[VT_BSTR:0]*/;
  _args[2] = RangoFinal /*[VT_BSTR:0]*/;
  _args[3] = NombreArchivo /*[VT_BSTR:0]*/;
  _args[4] = (int)TipoReporte /*[VT_USERDEFINED:0]*/;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ObtenerPrimerBloqueReporteElectronico(BSTR RangoInicial/*[in]*/, 
                                                       BSTR RangoFinal/*[in]*/, 
                                                       BSTR NombreArchivo/*[in]*/, 
                                                       Ifuniversal_tlb::TipoReporteElectronico TipoReporte/*[in]*/)
{
  OLE_CANCELBOOL Resultado;
  this->ObtenerPrimerBloqueReporteElectronico(RangoInicial, RangoFinal, NombreArchivo, TipoReporte, (OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ObtenerSiguienteBloqueReporteElectronico(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ObtenerSiguienteBloqueReporteElectronico"), DISPID(255));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ObtenerSiguienteBloqueReporteElectronico(void)
{
  OLE_CANCELBOOL Resultado;
  this->ObtenerSiguienteBloqueReporteElectronico((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

template <class T> HRESULT __fastcall
IDriverDispT<T>::ConsultarCapacidadZetas(OLE_CANCELBOOL* Resultado/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConsultarCapacidadZetas"), DISPID(256));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Resultado /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IDriverDispT<T>::ConsultarCapacidadZetas(void)
{
  OLE_CANCELBOOL Resultado;
  this->ConsultarCapacidadZetas((OLE_CANCELBOOL*)&Resultado);
  return Resultado;
}

// *********************************************************************//
// SmartIntf: TCOMIObtenerDatosDeInicializacionRespuesta
// Interface: IObtenerDatosDeInicializacionRespuesta
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroCUIT(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NroCUIT(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroCUIT(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NroCUIT((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_RazonSocial(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_RazonSocial(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_RazonSocial(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_RazonSocial((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroSerie(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NroSerie(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroSerie(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NroSerie((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_FechaInicializacion(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_FechaInicializacion(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_FechaInicializacion(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_FechaInicializacion((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroPOS(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_NroPOS(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_NroPOS(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_NroPOS((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_FechaIniActividades(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_FechaIniActividades(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_FechaIniActividades(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_FechaIniActividades((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_CodIngBrutos(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_CodIngBrutos(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_CodIngBrutos(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_CodIngBrutos((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_RespIVA(BSTR* Value/*[out,retval]*/)
{
  return (*this)->get_RespIVA(Value);
}

template <class T> BSTR __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_RespIVA(void)
{
  BSTR Value = 0;
  OLECHECK(this->get_RespIVA((BSTR*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Resultado(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMIObtenerDatosDeInicializacionRespuestaT<T>::get_Resultado(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_Resultado((OLE_CANCELBOOL*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IObtenerDatosDeInicializacionRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {44C8E088-C222-4FC1-94ED-9395F5FE32C2}
// *********************************************************************//
template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroCUIT(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NroCUIT"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroCUIT(void)
{
  BSTR Value;
  this->get_NroCUIT((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_RazonSocial(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RazonSocial"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_RazonSocial(void)
{
  BSTR Value;
  this->get_RazonSocial((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroSerie(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NroSerie"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroSerie(void)
{
  BSTR Value;
  this->get_NroSerie((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_FechaInicializacion(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FechaInicializacion"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_FechaInicializacion(void)
{
  BSTR Value;
  this->get_FechaInicializacion((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroPOS(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NroPOS"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_NroPOS(void)
{
  BSTR Value;
  this->get_NroPOS((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_FechaIniActividades(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FechaIniActividades"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_FechaIniActividades(void)
{
  BSTR Value;
  this->get_FechaIniActividades((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_CodIngBrutos(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CodIngBrutos"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_CodIngBrutos(void)
{
  BSTR Value;
  this->get_CodIngBrutos((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_RespIVA(BSTR* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RespIVA"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_RespIVA(void)
{
  BSTR Value;
  this->get_RespIVA((BSTR*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resultado"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
IObtenerDatosDeInicializacionRespuestaDispT<T>::get_Resultado(void)
{
  OLE_CANCELBOOL Value;
  this->get_Resultado((OLE_CANCELBOOL*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMISubtotalRespuesta
// Interface: ISubtotalRespuesta
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_CantidadItemsVendidos(double* Value/*[out,retval]*/)
{
  return (*this)->get_CantidadItemsVendidos(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_CantidadItemsVendidos(void)
{
  double Value;
  OLECHECK(this->get_CantidadItemsVendidos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoVentas(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoVentas(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoVentas(void)
{
  double Value;
  OLECHECK(this->get_MontoVentas((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoIVA(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoIVA(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoIVA(void)
{
  double Value;
  OLECHECK(this->get_MontoIVA((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoPagado(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoPagado(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoPagado(void)
{
  double Value;
  OLECHECK(this->get_MontoPagado((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoIVANoInscripto(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoIVANoInscripto(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoIVANoInscripto(void)
{
  double Value;
  OLECHECK(this->get_MontoIVANoInscripto((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoImpuestosInternos(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoImpuestosInternos(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoImpuestosInternos(void)
{
  double Value;
  OLECHECK(this->get_MontoImpuestosInternos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoNeto(double* Value/*[out,retval]*/)
{
  return (*this)->get_MontoNeto(Value);
}

template <class T> double __fastcall
TCOMISubtotalRespuestaT<T>::get_MontoNeto(void)
{
  double Value;
  OLECHECK(this->get_MontoNeto((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMISubtotalRespuestaT<T>::get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  return (*this)->get_Resultado(Value);
}

template <class T> OLE_CANCELBOOL __fastcall
TCOMISubtotalRespuestaT<T>::get_Resultado(void)
{
  OLE_CANCELBOOL Value;
  OLECHECK(this->get_Resultado((OLE_CANCELBOOL*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  ISubtotalRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {09BDCB7C-4945-4231-AB0C-628CF69E8561}
// *********************************************************************//
template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_CantidadItemsVendidos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CantidadItemsVendidos"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_CantidadItemsVendidos(void)
{
  double Value;
  this->get_CantidadItemsVendidos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoVentas(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoVentas"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoVentas(void)
{
  double Value;
  this->get_MontoVentas((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoIVA(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoIVA"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoIVA(void)
{
  double Value;
  this->get_MontoIVA((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoPagado(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoPagado"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoPagado(void)
{
  double Value;
  this->get_MontoPagado((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoIVANoInscripto(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoIVANoInscripto"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoIVANoInscripto(void)
{
  double Value;
  this->get_MontoIVANoInscripto((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoImpuestosInternos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoImpuestosInternos"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoImpuestosInternos(void)
{
  double Value;
  this->get_MontoImpuestosInternos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_MontoNeto(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MontoNeto"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ISubtotalRespuestaDispT<T>::get_MontoNeto(void)
{
  double Value;
  this->get_MontoNeto((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ISubtotalRespuestaDispT<T>::get_Resultado(OLE_CANCELBOOL* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Resultado"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> OLE_CANCELBOOL __fastcall
ISubtotalRespuestaDispT<T>::get_Resultado(void)
{
  OLE_CANCELBOOL Value;
  this->get_Resultado((OLE_CANCELBOOL*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMICierreZTotales
// Interface: ICierreZTotales
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalVentas(double* Value/*[out,retval]*/)
{
  return (*this)->get_FNDTotalVentas(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalVentas(void)
{
  double Value;
  OLECHECK(this->get_FNDTotalVentas((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalIVA(double* Value/*[out,retval]*/)
{
  return (*this)->get_FNDTotalIVA(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalIVA(void)
{
  double Value;
  OLECHECK(this->get_FNDTotalIVA((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalImpuestosInternos(double* Value/*[out,retval]*/)
{
  return (*this)->get_FNDTotalImpuestosInternos(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalImpuestosInternos(void)
{
  double Value;
  OLECHECK(this->get_FNDTotalImpuestosInternos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalOtrosTributos(double* Value/*[out,retval]*/)
{
  return (*this)->get_FNDTotalOtrosTributos(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_FNDTotalOtrosTributos(void)
{
  double Value;
  OLECHECK(this->get_FNDTotalOtrosTributos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalVentas(double* Value/*[out,retval]*/)
{
  return (*this)->get_NCTotalVentas(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalVentas(void)
{
  double Value;
  OLECHECK(this->get_NCTotalVentas((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalIVA(double* Value/*[out,retval]*/)
{
  return (*this)->get_NCTotalIVA(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalIVA(void)
{
  double Value;
  OLECHECK(this->get_NCTotalIVA((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalImpuestosInternos(double* Value/*[out,retval]*/)
{
  return (*this)->get_NCTotalImpuestosInternos(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalImpuestosInternos(void)
{
  double Value;
  OLECHECK(this->get_NCTotalImpuestosInternos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalOtrosTributos(double* Value/*[out,retval]*/)
{
  return (*this)->get_NCTotalOtrosTributos(Value);
}

template <class T> double __fastcall
TCOMICierreZTotalesT<T>::get_NCTotalOtrosTributos(void)
{
  double Value;
  OLECHECK(this->get_NCTotalOtrosTributos((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMICierreZTotalesT<T>::get_NroCierre(long* Value/*[out,retval]*/)
{
  return (*this)->get_NroCierre(Value);
}

template <class T> long __fastcall
TCOMICierreZTotalesT<T>::get_NroCierre(void)
{
  long Value;
  OLECHECK(this->get_NroCierre((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  ICierreZTotales
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {A7973DAB-A411-454D-927E-517037721A21}
// *********************************************************************//
template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalVentas(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNDTotalVentas"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalVentas(void)
{
  double Value;
  this->get_FNDTotalVentas((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalIVA(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNDTotalIVA"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalIVA(void)
{
  double Value;
  this->get_FNDTotalIVA((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalImpuestosInternos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNDTotalImpuestosInternos"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalImpuestosInternos(void)
{
  double Value;
  this->get_FNDTotalImpuestosInternos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalOtrosTributos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FNDTotalOtrosTributos"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_FNDTotalOtrosTributos(void)
{
  double Value;
  this->get_FNDTotalOtrosTributos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_NCTotalVentas(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NCTotalVentas"), DISPID(205));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_NCTotalVentas(void)
{
  double Value;
  this->get_NCTotalVentas((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_NCTotalIVA(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NCTotalIVA"), DISPID(206));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_NCTotalIVA(void)
{
  double Value;
  this->get_NCTotalIVA((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_NCTotalImpuestosInternos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NCTotalImpuestosInternos"), DISPID(207));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_NCTotalImpuestosInternos(void)
{
  double Value;
  this->get_NCTotalImpuestosInternos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_NCTotalOtrosTributos(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NCTotalOtrosTributos"), DISPID(208));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
ICierreZTotalesDispT<T>::get_NCTotalOtrosTributos(void)
{
  double Value;
  this->get_NCTotalOtrosTributos((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
ICierreZTotalesDispT<T>::get_NroCierre(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NroCierre"), DISPID(209));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
ICierreZTotalesDispT<T>::get_NroCierre(void)
{
  long Value;
  this->get_NroCierre((long*)&Value);
  return Value;
}

// *********************************************************************//
// SmartIntf: TCOMIConsultarCapacidadZetasRespuesta
// Interface: IConsultarCapacidadZetasRespuesta
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_CantidadDeZetasRemanente(long* Value/*[out,retval]*/)
{
  return (*this)->get_CantidadDeZetasRemanente(Value);
}

template <class T> long __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_CantidadDeZetasRemanente(void)
{
  long Value;
  OLECHECK(this->get_CantidadDeZetasRemanente((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZeta(long* Value/*[out,retval]*/)
{
  return (*this)->get_UltimaZeta(Value);
}

template <class T> long __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZeta(void)
{
  long Value;
  OLECHECK(this->get_UltimaZeta((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZetaBajada(long* Value/*[out,retval]*/)
{
  return (*this)->get_UltimaZetaBajada(Value);
}

template <class T> long __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZetaBajada(void)
{
  long Value;
  OLECHECK(this->get_UltimaZetaBajada((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZetaBorrable(long* Value/*[out,retval]*/)
{
  return (*this)->get_UltimaZetaBorrable(Value);
}

template <class T> long __fastcall
TCOMIConsultarCapacidadZetasRespuestaT<T>::get_UltimaZetaBorrable(void)
{
  long Value;
  OLECHECK(this->get_UltimaZetaBorrable((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  IConsultarCapacidadZetasRespuesta
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {1D33F62C-0EA9-44D4-8971-2333F441D7EE}
// *********************************************************************//
template <class T> HRESULT __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_CantidadDeZetasRemanente(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CantidadDeZetasRemanente"), DISPID(201));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_CantidadDeZetasRemanente(void)
{
  long Value;
  this->get_CantidadDeZetasRemanente((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZeta(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltimaZeta"), DISPID(202));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZeta(void)
{
  long Value;
  this->get_UltimaZeta((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZetaBajada(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltimaZetaBajada"), DISPID(203));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZetaBajada(void)
{
  long Value;
  this->get_UltimaZetaBajada((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZetaBorrable(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltimaZetaBorrable"), DISPID(204));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IConsultarCapacidadZetasRespuestaDispT<T>::get_UltimaZetaBorrable(void)
{
  long Value;
  this->get_UltimaZetaBorrable((long*)&Value);
  return Value;
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : Driver
// Interface: TCOMIDriver
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIDriver, IDriver, &CLSID_Driver, &IID_IDriver> CoDriver;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ObtenerDatosDeInicializacionRespuesta
// Interface: TCOMIObtenerDatosDeInicializacionRespuesta
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIObtenerDatosDeInicializacionRespuesta, IObtenerDatosDeInicializacionRespuesta, &CLSID_ObtenerDatosDeInicializacionRespuesta, &IID_IObtenerDatosDeInicializacionRespuesta> CoObtenerDatosDeInicializacionRespuesta;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : SubtotalRespuesta
// Interface: TCOMISubtotalRespuesta
// *********************************************************************//
typedef TCoClassCreatorT<TCOMISubtotalRespuesta, ISubtotalRespuesta, &CLSID_SubtotalRespuesta, &IID_ISubtotalRespuesta> CoSubtotalRespuesta;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : CierreZTotales
// Interface: TCOMICierreZTotales
// *********************************************************************//
typedef TCoClassCreatorT<TCOMICierreZTotales, ICierreZTotales, &CLSID_CierreZTotales, &IID_ICierreZTotales> CoCierreZTotales;

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : ConsultarCapacidadZetasRespuesta
// Interface: TCOMIConsultarCapacidadZetasRespuesta
// *********************************************************************//
typedef TCoClassCreatorT<TCOMIConsultarCapacidadZetasRespuesta, IConsultarCapacidadZetasRespuesta, &CLSID_ConsultarCapacidadZetasRespuesta, &IID_IConsultarCapacidadZetasRespuesta> CoConsultarCapacidadZetasRespuesta;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Ifuniversal_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Ifuniversal_tlb;
#endif

#pragma option pop

#endif // IFUniversal_TLBH
